<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UlyC</title>
    <description>我见到过地狱与天堂的婚礼，战舰在猎户座肩旁熊熊燃烧！</description>
    <link>https://UlyC.github.io/</link>
    <atom:link href="https://UlyC.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 11 Jan 2021 01:43:46 +0000</pubDate>
    <lastBuildDate>Mon, 11 Jan 2021 01:43:46 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>常见RFID卡片介绍、破解思路 及 Proxmark3简介</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;我们大多数人至少都要工作三十年，这三十年里还会有很多东西要学。所以不用太在意之前学了什么，更重要的是看你还能学会什么。无论之前学过什么，将来都要再学新东西。无论之前学的是什么，将来也都会有用。艺无止境，功不唐捐。&lt;/p&gt;

  &lt;p&gt;​												——  tombkeeper&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;常见rfid卡片介绍破解思路-及-proxmark3简介&quot;&gt;常见RFID卡片介绍、破解思路 及 Proxmark3简介&lt;/h1&gt;

&lt;h2 id=&quot;rfid卡片&quot;&gt;RFID卡片&lt;/h2&gt;

&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;这篇只是最近学习RFID技术的一个笔记，请勿用于非法用途。&lt;/p&gt;

&lt;h3 id=&quot;简介&quot;&gt;简介&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;射频识别&lt;/strong&gt;（英语：&lt;strong&gt;R&lt;/strong&gt;adio &lt;strong&gt;F&lt;/strong&gt;requency &lt;strong&gt;ID&lt;/strong&gt;entification，&lt;a href=&quot;https://zh.wikipedia.org/wiki/縮寫&quot;&gt;缩写&lt;/a&gt;：&lt;strong&gt;RFID&lt;/strong&gt;）是一种&lt;a href=&quot;https://zh.wikipedia.org/wiki/無線&quot;&gt;无线&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/通信技术&quot;&gt;通信技术&lt;/a&gt;，可以通过&lt;a href=&quot;https://zh.wikipedia.org/wiki/无线电&quot;&gt;无线电&lt;/a&gt;信号识别特定目标并读写相关数据，而无需识别系统与特定目标之间建立&lt;a href=&quot;https://zh.wikipedia.org/wiki/机械&quot;&gt;机械&lt;/a&gt;或者&lt;a href=&quot;https://zh.wikipedia.org/wiki/光学&quot;&gt;光学&lt;/a&gt;接触。&lt;/p&gt;

&lt;p&gt;常用的ETC，门禁卡，手机的NFC功能，二代身份证，电子护照，动物识别标签等都是应用了RFID技术。&lt;/p&gt;

&lt;h3 id=&quot;常见卡片分类&quot;&gt;常见卡片分类&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/01/19/s6higpLEYqaITHF.png&quot; alt=&quot;RFID卡.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;介绍各种IC卡片的文章浩如烟海，不过大部分只介绍了低频的id卡以及符合ISO-14443A 标准的mifare系列卡。&lt;/p&gt;

&lt;p&gt;因为搬家之后，坑爹物业只给一张门禁卡，于是Nerd之血熊熊燃烧, 花了几百大洋买了个Proxmark3，当然要好好研究下RFID技术啦，也不会仅止步于常见几种卡片的探索。&lt;/p&gt;

&lt;p&gt;其实只看上面的脑图基本上就对RFID各种卡有个大致印象了，下面是对一些好玩的卡的详细介绍，无耐心可跳过。&lt;/p&gt;

&lt;h4 id=&quot;低频&quot;&gt;低频&lt;/h4&gt;

&lt;h5 id=&quot;id卡&quot;&gt;ID卡&lt;/h5&gt;

&lt;p&gt;ID卡是我们的俗称，内部芯片的全名叫做EM4100或EM41XX ，频率是125kHz。每张卡出厂就有独一无二的ID号，不可改写。没有任何加密，只要知道卡号就可以模拟。&lt;/p&gt;

&lt;p&gt;特殊的还有250K、375K、500K频率的ID卡，原版proxmark3不支持这种卡的读写，祖国魔改版有些支持。&lt;/p&gt;

&lt;h5 id=&quot;t5577卡&quot;&gt;T5577卡&lt;/h5&gt;

&lt;p&gt;T5577 卡是一种可以写入数据可以加密的低频卡。最特别之处是，写入ID号可以变身成为ID卡，写入HID号可以变身HID卡，写入Indala卡号，可以变身Indala卡。&lt;/p&gt;

&lt;p&gt;T5577一共有8个块，每个块只能存8位数。第0块是用来设置卡片类型和调制方式的，决定了卡片是ID卡还是HID卡，如果随意修改会导致读不到卡。最后一个块，在没有加密时是数据区，加密后，其数据就变成了密码。&lt;/p&gt;

&lt;p&gt;国内这卡主要是用来模拟ID卡用的。&lt;/p&gt;

&lt;h4 id=&quot;高频--14443a&quot;&gt;高频 -14443A&lt;/h4&gt;

&lt;h5 id=&quot;m1-s50卡&quot;&gt;M1 S50卡&lt;/h5&gt;

&lt;p&gt;目前最常见的高频卡，也是我们口中俗称的IC卡。M1卡科储存的数据大小为8k，分为16个扇区，每个扇区分4个块，每个块为16个字节，以块为存取单位。&lt;strong&gt;每个扇区都有独立的一组密码及访问控制&lt;/strong&gt;，每张卡有唯一的一个32位的序列号。每个扇区的0,1,2块为数据块，用来存储数据，第3块为控制块，包括了密A、存取控制、密码B
每张卡的第0扇区的第0块用来春芳厂商代码，不可更改。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/01/19/bJXGlaW1oeEi2IC.png&quot; alt=&quot;M1卡数据结构.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;中间4字节控制字是管理密码权限，用来设置A密码和B密码的功能。默认不修改的时候，可以用A密码读写所有数据。A密码不可读出，B密码可以用A密码读出。&lt;strong&gt;密码不一定可以读取，由控制字决定。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个卡又分 &lt;strong&gt;非加密卡&lt;/strong&gt; 、&lt;strong&gt;半加密卡&lt;/strong&gt; 和  &lt;strong&gt;全加密卡&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;非加密卡中所有扇区的KEYA和KEYB数值都是默认值FFFFFFFFFFFF。&lt;/p&gt;

&lt;p&gt;而加密卡中，其中有扇区的KEYA和KEYB不等于FFFFFFFFFFFF，部分扇区加密的卡称半加密卡，所有扇区都加密的卡称全加密卡。&lt;/p&gt;

&lt;h5 id=&quot;m1-uid卡&quot;&gt;M1 UID卡&lt;/h5&gt;

&lt;p&gt;全称l Mifare UID Chinese magic card（中国魔术卡），简称UID卡。&lt;/p&gt;

&lt;p&gt;M1 UID卡是针对M1 S50卡特制的变种卡，用起来和M1 S50完全一样，只是多了一个功能，就是0扇区块的数据可以随意修改。因此UID号也可以随意修改，厂家信息也可以随意修改。UID卡修改0扇区0块数据是靠指令进入工厂模式，可以直接对全卡任何数据编辑，不需要密码即可读写卡，同时不怕写坏卡，即使写错0块，写坏扇区控制字，也可以随时修复回来，不影响后续使用。&lt;/p&gt;

&lt;h5 id=&quot;cuid卡&quot;&gt;CUID卡&lt;/h5&gt;

&lt;p&gt;CUID卡是针对UID卡做的优化。CUID卡可以重复修改0块，但是它和UID卡的区别是，UID卡是通过&lt;strong&gt;指令&lt;/strong&gt;修改0块，CUID使用的是常规密码验证的方法写0块（写错了之后重写需要清卡），其他扇区和标准M1卡相同。缺点是，还是有可能会被检测出来，而且如果不小心写错了UID号的校验位导致无法读卡，没办法修复只能报废。&lt;/p&gt;

&lt;h5 id=&quot;fuid卡&quot;&gt;FUID卡&lt;/h5&gt;

&lt;p&gt;FUID卡是针对UID卡做的优化。新的读卡系统，通过检测卡片对特殊指令的回应，可以检测出UID卡，因此可以来拒绝UID卡的访问，来达到屏蔽复制卡的功能。&lt;strong&gt;FUID可以修改0块，但只可以修改一次&lt;/strong&gt;，写错也没办法更改，也不能重复利用。修改后和M1卡完全一样，很难被屏蔽检测。&lt;/p&gt;

&lt;h5 id=&quot;cfuid卡&quot;&gt;CFUID卡&lt;/h5&gt;

&lt;p&gt;​		鉴于FUID卡写错的成本太高，又发展出了这种卡。 CFUID卡 0扇区固化前可随意修改（相当于UID卡），固化（锁卡）后就跟M1卡完全一样。&lt;/p&gt;

&lt;h5 id=&quot;侦测卡&quot;&gt;侦测卡：&lt;/h5&gt;

&lt;p&gt;可用122等设备写入id号然后用来读取并记录设备发出的密码信息，用于侦测密码，但其功能鸡肋，前有pm3离线侦测，后有变色龙模拟加侦测，现在基本淘汰。&lt;/p&gt;

&lt;h5 id=&quot;emv卡&quot;&gt;EMV卡&lt;/h5&gt;

&lt;p&gt;EMV规范是由Europay、Mastercard、Visa三大信用卡国际组织联合制定的IC（智能）卡金融支付应用标准，非接触传输协议方面也是遵循的14443A标注，是一种&lt;strong&gt;CPU芯片卡&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;目前基于EMV卡的非接触式支付的实现有三个：VISA的payWave，MasterCard的PayPass以及银联的闪付QuickPass。目前从外观来看，银联发行的卡面有芯片的IC卡均支持闪付，部分银行支持VISA的payWave。&lt;/p&gt;

&lt;h4 id=&quot;高频--14443b&quot;&gt;高频 -14443B&lt;/h4&gt;

&lt;p&gt;跟ISO 14443 -Type A 标准 的不同主要在于&lt;strong&gt;载波的调制深度及位的编码方式&lt;/strong&gt;。TYPE A采用&lt;strong&gt;开关键控(On-Off keying)&lt;/strong&gt;的&lt;strong&gt;Manchester编码&lt;/strong&gt;，TYPE B采用&lt;strong&gt;NRZ-L&lt;/strong&gt;的&lt;strong&gt;BPSK编码&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;TYPE B与TYPE A相比，具有&lt;strong&gt;传输能量不中断、速率更高、抗干扰能力强&lt;/strong&gt;的优点。RFID的核心是防冲突技术，这也是和接触式IC卡的主要区别。ISO14443-3规定了TYPEA和TYPE B的防冲突机制。二者防冲突机制的原理不同，前者是&lt;strong&gt;基于位冲突检测协议&lt;/strong&gt;，而TYPE B&lt;strong&gt;通信系列命令序列完成防冲突。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;目前的二代身份证，社保卡，护照都是基于此标准，研究这个标准最初是为了能读出身份证信息或者护照，其中曲折下一篇文章再说。&lt;/p&gt;

&lt;p&gt;Proxmark3的14b部分有对 ST  Microelectronics  公司的 SRI512卡 和SRIX4K卡 的特别支持。&lt;/p&gt;

&lt;h4 id=&quot;nfc标签&quot;&gt;NFC标签&lt;/h4&gt;

&lt;p&gt;目前有五种，分别基于14a, 14b，Felica ，ISO/IEC 15693  标准, 详见上面脑图。&lt;/p&gt;

&lt;h3 id=&quot;高频卡-低频卡区分方法&quot;&gt;高频卡 低频卡区分方法&lt;/h3&gt;

&lt;p&gt;直接淘宝复制来的，比较直观：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/01/17/u7YA5XFp6n32NaG.png&quot; alt=&quot;1.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/01/17/vZHQc7OAV86ow4I.png&quot; alt=&quot;2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;门禁卡破解思路&quot;&gt;门禁卡破解思路&lt;/h3&gt;

&lt;p&gt;ID卡使用手持机或者proxmark3等设备直接读出卡号即可模拟，最是无脑，CPU卡建议直接放弃。&lt;/p&gt;

&lt;p&gt;所以这里的门禁卡单质 Mafira系列。&lt;/p&gt;

&lt;h4 id=&quot;ic卡加密方式&quot;&gt;IC卡加密方式&lt;/h4&gt;

&lt;p&gt;要知道怎么破解，先要知道他们是怎么加密。&lt;/p&gt;

&lt;p&gt;目前常见的加密方式有这几种：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/01/19/EOH7jDdGq2buLIQ.png&quot; alt=&quot;IC卡加密方式.png&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;1固定加密校验码&quot;&gt;1.固定加密（校验码）：&lt;/h5&gt;

&lt;p&gt;彼时来自东方的神秘技术 ：中国魔术卡 尚未降世，就算复制出来原卡数据，每张IC的ID也是不一样的，厂家只需要校验UID跟校验位匹配不匹配就可以防复制卡了。&lt;/p&gt;

&lt;p&gt;这种只需要UID卡复制其UID以及校验位即可完美破解。&lt;/p&gt;

&lt;h5 id=&quot;2一卡一密&quot;&gt;2.一卡一密：&lt;/h5&gt;

&lt;p&gt;这种加密方式只是把校验码，改成了密码。刷卡机读卡是根据卡号算出这张卡独一无二的密码，然后再用密码访问/修改金额 。&lt;/p&gt;

&lt;p&gt;运用UID卡复制，也可简单解决。&lt;/p&gt;

&lt;h5 id=&quot;3全加密&quot;&gt;3.全加密：&lt;/h5&gt;

&lt;p&gt;即IC卡16扇区均加入密码，一般是一个卡商用同一密码，密码破解可通过 侦测卡或pm3离线侦测，密码已知后，写入普通卡或UID卡，即可实现复制。&lt;/p&gt;

&lt;p&gt;后来又出现了一种 一卡一密+ 全加密的卡，不过在PM3及UID卡面前不过是土鸡瓦狗而已。&lt;/p&gt;

&lt;h5 id=&quot;4动态码加密&quot;&gt;4.动态码加密：&lt;/h5&gt;

&lt;p&gt;每次刷卡后，卡内数据都会变化。&lt;/p&gt;

&lt;p&gt;这种比较麻烦，可以分几种情况：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;有些系统比较简单，每次刷新后某个数据加一，或者加固定数字，这种很容易&lt;strong&gt;发现规律&lt;/strong&gt;和破解。&lt;/li&gt;
  &lt;li&gt;有些卡数据刷新后没有什么规律，明显用了某种算法，这种有能力的可以多刷几次，尝试&lt;strong&gt;逆向算法&lt;/strong&gt;，不过难度比较大，&lt;/li&gt;
  &lt;li&gt;通过更改控制位或者修改卡内某些地方的数据来&lt;strong&gt;压制卡内数据的滚动&lt;/strong&gt;，这是利用了早期某些厂家的读头不会校验计算后的数据是否写入成功的漏洞。&lt;/li&gt;
  &lt;li&gt;一些系统识别到卡里数据是从未滚动过的初始值后，就不会再做任何校验，认为这是张新卡。这种只要记录下初始数据，复制卡每次刷卡后 &lt;strong&gt;重置数据&lt;/strong&gt;即可。 (刚了解到还有一种GTU卡（gtu、guid、gid、gpu，处女卡）, 可以锁定滚动码，让读卡器写卡失败卡)&lt;/li&gt;
  &lt;li&gt;一些系统识别到卡里数据是初始值后，还会进行校验，这时候我们可以使用同厂家同型号同版本的发卡器，通过修改发卡器发卡规则使得规则与物业的发卡规则相同来&lt;strong&gt;发卡&lt;/strong&gt;。但是破解发卡规则同样很难，同时梯控厂家也不会向个人单独销售配套发卡器。&lt;/li&gt;
  &lt;li&gt;社工大法：通过保洁阿姨、保安大哥或者特别的技法获取 &lt;strong&gt;全通卡&lt;/strong&gt;，就是给内部员工用的“万能钥匙”，这种卡一般不做加密，搞到之后复制一张基本就OK了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;注意事项&lt;/strong&gt;：复制卡不确定是否是滚动码时， 复制后第一次刷卡原则上请刷原卡，不然数据滚动之后，原卡可能作废  。 卡与原卡仅一张有效&lt;/p&gt;

&lt;h5 id=&quot;5防复制加密&quot;&gt;5.防复制加密：&lt;/h5&gt;

&lt;p&gt;用UID卡复制成功以后去现场刷卡没任何反应 或 就可以使用一次以后就给设备破环了拷贝卡的问题。&lt;/p&gt;

&lt;p&gt;也存在几种情况，目前最常用的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;校验magic指令，UID卡会响应magic指令，所以防火墙只要发现有magic指令的响应直接ban掉改卡，于是CUID卡应运而生。&lt;/li&gt;
  &lt;li&gt;防火墙尝试修改卡的0扇区，修改成功则说明是CUID卡，ban掉。 这种用FUID或者CFUID复制即可。&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;6复合卡加密&quot;&gt;6.复合卡加密：&lt;/h5&gt;

&lt;p&gt;利用ID或IC设备复制成功以后就可以开启其中一个地方，其他地方不可以同时开启。一般是IC+ID的结构，需要同时复制高频低频两个芯片。&lt;/p&gt;

&lt;h5 id=&quot;7cpu芯片加密&quot;&gt;7.CPU芯片加密：&lt;/h5&gt;

&lt;p&gt;这种分析数据时全是零， 可能目标卡是CPU卡模拟的M1卡 或是 修改了控制位的数据把卡号隐藏起来。  这种可以最多可以做到复制UID，模拟刷个门禁啥的，涉及金额的就别想了。&lt;/p&gt;

&lt;h4 id=&quot;一般流程&quot;&gt;一般流程&lt;/h4&gt;

&lt;p&gt;流程图如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/01/19/dofNYZOny3p2gXa.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;proxmark3&quot;&gt;Proxmark3&lt;/h2&gt;

&lt;h3 id=&quot;前言-1&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;之前想买个proxmark3 玩，但是发现淘宝卖家基本都是自吹自擂，对自己是PM3哪个版本都遮遮掩掩，语焉不详。 谷歌到的中文资料也比较少，大多是互相复制粘贴的资料，没人仔细介绍过PM3都有哪些版本，于是有了写这篇的动力，希望能使新手对proxmark3有个直观了解。&lt;/p&gt;

&lt;h3 id=&quot;简介-1&quot;&gt;简介&lt;/h3&gt;

&lt;p&gt;Proxmark3是由&lt;em&gt;Jonathan Westhues&lt;/em&gt;为了他的硕士论文设计开发的开源硬件，其主要用途是实现RFID卡片 的嗅探、读取破解以及克隆等等操作。&lt;/p&gt;

&lt;p&gt;提到RFID， 就不得不提Proxmark3，PM3 属于这个领域的大杀器，基本相当于kali之于安全，node之于前端。它可以嗅探、模拟以及读取多种不同种类型的RFID，同时它还有一个&lt;a href=&quot;http://www.proxmark.org/forum/index.php&quot;&gt;官方社区&lt;/a&gt;，这里有不少同样的爱好者在里面学习交流。&lt;/p&gt;

&lt;p&gt;Proxmark，确切来说是prox（接近的），mark（标签），翻译过来的意思就是“不用接触，靠近就能刷的卡片”。&lt;/p&gt;

&lt;h3 id=&quot;版本&quot;&gt;版本&lt;/h3&gt;

&lt;h4 id=&quot;proxmark2&quot;&gt;Proxmark2&lt;/h4&gt;

&lt;p&gt;Proxmark是没有1的 ，Proxmark3  前身是Proxmark2。&lt;/p&gt;

&lt;p&gt;Proxmark2版本是因为&lt;em&gt;Jonathan Wesrhues&lt;/em&gt;    为了复制Verichip才应运而生的。   而Proxmark2的前身就是一个便携式的Verichips，该硬件可以读取并且重放Verichip的ID，如果利用天线去靠近Verichip，那样子设备就可以永远的保留ID在芯片里面，实际上Jonathan Westhues只是采用逆向工程把Verichip的频率和调制模式进行捕抓，从而进行回放操作。&lt;/p&gt;

&lt;h4 id=&quot;proxmark3-原版&quot;&gt;Proxmark3 原版&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://proxmark.com/user/pages/03.proxmark-3-hardware/05.proxmark-3/PM3-Trans.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;原型机，长这样，开源硬件，电路板github有，已经过时了，不是商业产品，不卖。&lt;/p&gt;

&lt;p&gt;其他版本都是基于此版的原理做的改板。&lt;/p&gt;

&lt;h4 id=&quot;proxmark3-rdv2&quot;&gt;Proxmark3 RDV2&lt;/h4&gt;

&lt;p&gt;这个版本算是Proxmark3第一次商业化的版本，研发团队是&lt;em&gt;Elechouse&lt;/em&gt;（深圳一家硬件厂商） 。 RDV2  即是 Revision Two（重制版2 )。&lt;/p&gt;

&lt;p&gt;Proxmark3 RDV2  修改和更新了Proxmark3所有主要的硬件组件，包括微控制器，FPGA和闪存。&lt;/p&gt;

&lt;p&gt;但是，最重要的变化是天线的设计和实现。 Proxmark 3的笨重，笨拙和未调谐的天线已替换为紧凑的，预先调谐的HF和LF天线，使用标准的SMA接口代替以前使用的USB-Hirose电缆。&lt;/p&gt;

&lt;p&gt;这个版本预装了可拆的低频和高频天线，也是首个“ALL-IN-ONE”的版本。但是天线性能存在已知问题，并且会被继电器故障影响。&lt;/p&gt;

&lt;p&gt;有些论坛说的血贵的就是这个版本，之前貌似上千，现在五六百左右吧。&lt;/p&gt;

&lt;h5 id=&quot;技术规格&quot;&gt;技术规格&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; AT91SAM7S512&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt; 512Kb SPI flash&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interface&lt;/strong&gt;  4x mode LEDs, 1x button.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Battery&lt;/strong&gt;  独立外接电源&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;天线&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;LF&lt;/strong&gt;  预装，可拆&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;HF&lt;/strong&gt; 预装，可拆&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般来说长这样：&lt;img src=&quot;https://i.loli.net/2020/01/19/SU73KOvpHDoxtEW.png&quot; alt=&quot;rdv2.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;proxmark3-easy&quot;&gt;Proxmark3 EASY&lt;/h4&gt;

&lt;p&gt;同样是 &lt;em&gt;Elechouse&lt;/em&gt;团队的作品，是Proxmark3 RDV2 的阉割版，主要为了迎合中国市场在某宝卖的。&lt;/p&gt;

&lt;p&gt;基本上某宝卖的都是基于这个版本或Proxmark3 RDV2  的魔改版。&lt;/p&gt;

&lt;p&gt;比RDV2阉割了CPU、内存,还有外接电池。&lt;/p&gt;

&lt;h5 id=&quot;技术规格-1&quot;&gt;技术规格&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; AT91SAM7S256&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt; 256Kb SPI flash&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interface&lt;/strong&gt; 4x mode LEDs, 1x button.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;天线&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;LF&lt;/strong&gt;  需自行组装&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;HF&lt;/strong&gt;  一体，不可拆&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;长这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://proxmark.com/user/pages/03.proxmark-3-hardware/04.proxmark-3-easy/PM3-Easy-Trans.png&quot; alt=&quot;Proxmark3 EASY&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;proxmark-3-evo&quot;&gt;Proxmark 3 EVO&lt;/h4&gt;

&lt;p&gt;Proxmark 3 EVO(Evolution，进化版)，是&lt;strong&gt;Elechouse&lt;/strong&gt; 开发的最后一个Proxmark 3版本，更加的小型化，用了ABS 的材质，加了点灯，适配了安卓平台。&lt;/p&gt;

&lt;h5 id=&quot;技术规格-2&quot;&gt;技术规格&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; AT91SAM7S512&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt; External 2MBits / 512Kb SPI flash&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interface&lt;/strong&gt; 1x RGB LED, 1x button.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;电源&lt;/strong&gt;   外接独立电池&lt;/li&gt;
  &lt;li&gt;天线
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;LF&lt;/strong&gt; 预装，一体&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;HF&lt;/strong&gt; 预装，一体&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个版本国内见的不多，优化也有限，长这样：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://proxmark.com/user/pages/03.proxmark-3-hardware/02.proxmark-3-evo/PM3-Evo-Trans.png&quot; alt=&quot;Proxmark 3 EVO&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;proxmark3-rdv4&quot;&gt;Proxmark3 RDV4&lt;/h4&gt;

&lt;p&gt;Proxmark3 RDV4是目前Proxmark3 平台 最新的版本，由 &lt;em&gt;RRG&lt;/em&gt;团队开发，就是开官方论坛和固件很受欢迎的&lt;em&gt;iceman&lt;/em&gt; 所在的团队 。 不过价格比较贵，基础版要一千五左右，所有外设买齐得好几千，需要海淘。&lt;/p&gt;

&lt;h5 id=&quot;版本特色&quot;&gt;版本特色&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;更小的体积 54 x 87 x 10mm （EVO是60 x 90 x 12mm）&lt;/li&gt;
  &lt;li&gt;支持了 SIM/Smart 卡的嗅探和读取&lt;/li&gt;
  &lt;li&gt;可扩展框架：
    &lt;ul&gt;
      &lt;li&gt;可热插拔的中长距离天线&lt;/li&gt;
      &lt;li&gt;增加了 蓝牙 和 wifi 模式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;技术规格-3&quot;&gt;技术规格&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;CPU&lt;/strong&gt; SAM7S512&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Storage&lt;/strong&gt; External 2MBits / 256Kb SPI flash&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Interface&lt;/strong&gt; 4x power LEDs, 4x mode LEDs, 1x button.&lt;/li&gt;
  &lt;li&gt;天线
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;LF&lt;/strong&gt; (125KHz): 70mm @ 65V&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;HF&lt;/strong&gt; (13.56MHz): 88mm @ 44V&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.wasyoung.com/wp-content/uploads/2019/11/2019120105235280.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;proxmark3-各种祖国版&quot;&gt;Proxmark3 各种祖国版&lt;/h4&gt;

&lt;p&gt;商家鼓吹什么3.0、4.0、5.0，终极 版本，其实各种版本基本都是Proxmark3  RDV2 或者easy 魔改的，选购时关注下cpu版本和内存 线圈和做工即可。&lt;/p&gt;

&lt;p&gt;不过有时候会看到各种颜色，颜色只是印刷电路板用的阻焊剂（阻焊漆）不一样，油墨颜色不一样，不会影响实际功能和质量。&lt;/p&gt;

&lt;p&gt;常见的电路板颜色有绿色、红色、蓝色、黑色。详细信息可以自行百度。原来的pm3是黑色的，看上去高端一些。现在新出了蓝色的，没别的原因，就是为了降低成本。虽然不影响质量，但是绿色、红色、蓝色的油墨用得比较多，量大价格就低。&lt;/p&gt;

&lt;p&gt;不要听一些商家瞎吹做了什么升级，保证元器件没有任何改动。商家鼓吹蓝色是升级款，只是为了掩盖他的真实原因是为了降低成本，外加一波营销。&lt;/p&gt;

&lt;p&gt;我买的是苏州龙达出的一款所谓“&lt;strong&gt;终极版&lt;/strong&gt;”，&lt;img src=&quot;http://www.ldpm3.com/picture/front.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;说是最新自主研发5.0系统，其实就是RDV2的魔改版，他家利用隔板的空间，集成了变色龙，还在隔板上装了显示屏、按钮，类似手持机的功能，可以不开电脑复制ID卡。&lt;/p&gt;

&lt;p&gt;特色是中文GUI客户端一直在优化，适合小白使用。&lt;/p&gt;

&lt;h4 id=&quot;变色龙-mini-chameleonmini&quot;&gt;变色龙 Mini ,ChameleonMini&lt;/h4&gt;

&lt;p&gt;在网购PM3时，经常可以看到有PM3变色龙一体机卖，当时询问js ,他们也是语焉不详 。所以这里再单独介绍下变色龙是个啥。&lt;/p&gt;

&lt;p&gt;变色龙 &lt;a href=&quot;https://github.com/emsec/ChameleonMini&quot;&gt;ChameleonMini&lt;/a&gt; 是一款可编程的 NFC 安全分析工具的开源硬件项目，可模拟各种ic卡、侦测密码，可同时储存六组卡片数据随时可以手动切换，体积跟普通卡差不多方便携带。&lt;/p&gt;

&lt;p&gt;ChameleonMini 常见的有两个版本 &lt;strong&gt;ChameleonMini Rev.E&lt;/strong&gt; 与 &lt;strong&gt;ChameleonMini Rev.G&lt;/strong&gt; 其中 Rev.G 是最新升级的版本，自带电池供电。&lt;/p&gt;

&lt;p&gt;说白了，变色龙就是一张先进的侦测卡，不具备读写功能，需要配合其他读写设备使用。 PM3的现场嗅探功能其实比较弱，集成了变色龙之后就补齐了这个短板。&lt;/p&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;p&gt;中文GUI主要是对43a的IC卡和 低频ID做的支持，对其他协议的卡片都没有支持。&lt;/p&gt;

&lt;p&gt;熟悉基本操作之后，想要探索PM3的魅力还是推荐使用 命令行， 命令行教程汉化可以看RadioWar的wiki &lt;a href=&quot;http://wiki.radiowar.org/Proxmark3%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C&quot;&gt;RadioWar:Proxmark3命令帮助&lt;/a&gt;，其他教程也非常的多，可以自行查找。&lt;/p&gt;

&lt;p&gt;打开方法是进入软件安装目录：&lt;/p&gt;

&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/prommark3.exe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# com号会变，根据自己实际情况调整&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;[1]. &lt;a href=&quot;https://proxmark.com/proxmark-3-hardware&quot;&gt;Porxmark 官网&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2]. &lt;a href=&quot;https://4hou.win/wordpress/?paged=13&amp;amp;cat=17&quot;&gt;智能卡破解入门二三事&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3]. &lt;a href=&quot;https://lzy-wi.github.io/2018/07/26/proxmark3/&quot;&gt;Proxmark3 Easy破解门禁卡学习过程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[4]. &lt;a href=&quot;https://cloud.tencent.com/developer/article/1043152&quot;&gt;低成本安全硬件 RFID on PN532&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[5]. &lt;a href=&quot;[http://read.pudn.com/downloads121/ebook/513161/%E5%90%84%E4%BA%A7%E5%93%81.pdf](http://read.pudn.com/downloads121/ebook/513161/各产品.pdf)&quot;&gt;非接触IC卡主要产品简介&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[6]. &lt;a href=&quot;http://www.card1688.com/smart_card/STMicroelectronics_chip_card.html&quot;&gt;STMicroelectronics 芯片卡&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[7]. &lt;a href=&quot;https://wenku.baidu.com/view/597156eee009581b6bd9eb3e.html&quot;&gt;iCLASS说明文件&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[8].&lt;a href=&quot;http://www.nfchome.org/nfc-forum-type1-type2-type3-type4.html&quot;&gt;[NFC Forum标签平台四种标签类型详细介绍]&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[9]. &lt;a href=&quot;https://www.cnblogs.com/sky-heaven/p/4704895.html&quot;&gt;初识CPU卡、SAM卡/CPU卡简介、SAM卡简介 【转】&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[10]. &lt;a href=&quot;https://zhuanlan.zhihu.com/p/81384126&quot;&gt;手把手教 如何模拟IC加密卡&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[11]. &lt;a href=&quot;https://www.guhei.net/post/jb1108&quot;&gt;IC卡加密解密方式&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[12].&lt;a href=&quot;http://rdcqii.hundsun.com/portal/article/642.mhtml&quot;&gt;除了支付/刷卡还能干嘛？三分钟教你玩转RFID&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[13].&lt;a href=&quot;https://www.freebuf.com/vuls/192356.html&quot;&gt;使用HackCube-Special分析滚动码信号&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[14]. &lt;a href=&quot;https://www.wasyoung.com/2019/11/30/337/&quot;&gt;Proxmark3（PM3）硬件简单拆解与介绍&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[15].&lt;a href=&quot;https://www.wasyoung.com/2019/11/30/337/&quot;&gt;梯控、IC卡滚动码防复制原理和破解&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[16]. &lt;a href=&quot;http://www.ickezhan.com/bbs/forum.php?mod=viewthread&amp;amp;tid=41&quot;&gt;简单讨论滚动码技术&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[17]. &lt;a href=&quot;http://wiki.radiowar.org/Proxmark3%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C&quot;&gt;RadioWar:Proxmark3命令帮助&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[18]. &lt;a href=&quot;https://www.cert.org.cn/upload/cncertcc06/0330/ct1/5.060330-YuYang-ThreatsFromAir.pdf&quot;&gt;来自空中的威胁&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[19]. 《非接触IC卡原理与应用》[电子工业出版社 2006-09-01]&lt;/p&gt;
</description>
        <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2020/01/18/%E5%B8%B8%E8%A7%81RFID%E5%8D%A1%E7%89%87%E4%BB%8B%E7%BB%8D-%E7%A0%B4%E8%A7%A3%E6%80%9D%E8%B7%AF-%E5%8F%8A-Proxmark3%E7%AE%80%E4%BB%8B/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2020/01/18/%E5%B8%B8%E8%A7%81RFID%E5%8D%A1%E7%89%87%E4%BB%8B%E7%BB%8D-%E7%A0%B4%E8%A7%A3%E6%80%9D%E8%B7%AF-%E5%8F%8A-Proxmark3%E7%AE%80%E4%BB%8B/</guid>
        
        <category>Proxmark3</category>
        
        <category>RFID</category>
        
        <category>安全</category>
        
        <category>IC卡</category>
        
        <category>滚动码</category>
        
        
      </item>
    
      <item>
        <title>win10下使用WSL 2</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;win 10是最好的linux发行版！&lt;/p&gt;

  &lt;p&gt;​												——  佚名&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;win10下使用wsl-2&quot;&gt;win10下使用WSL 2&lt;/h1&gt;

&lt;h2 id=&quot;准备工作&quot;&gt;准备工作&lt;/h2&gt;

&lt;p&gt;之前有介绍过使用wsl 1版本做开发的方法， &lt;a href=&quot;https://ulyc.github.io/2018/12/16/win10%E4%BD%BF%E7%94%A8pyhcarm%E9%85%8D%E5%90%88WSL%E5%BC%80%E5%8F%91python/&quot;&gt;win10配合Ubuntu子系统打造舒适Python开发环境&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;然后需要确认自己系统的版本是否高于18917。&lt;/p&gt;

&lt;p&gt;这里的坑在于18917版本我使用的时候还未正式推送更新，导致试了许多办法都没能启用WSL2，后来我是加入了Windows 预览体验计划之后才获得高于此版本的更新。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/11/25/OLBlxyrAcgvU9am.png&quot; alt=&quot;win预览计划.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安装wsl2&quot;&gt;安装wsl2&lt;/h2&gt;

&lt;p&gt;要安装并开始使用 WSL 2，请完成以下步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;启用“ &lt;em&gt;虚拟机平台(Virtual Machine Platform)&lt;/em&gt;”可选组件&lt;/li&gt;
  &lt;li&gt;使用命令行设置要由 WSL 2 支持的发行版&lt;/li&gt;
  &lt;li&gt;验证你的发行版使用的 WSL 版本&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;请注意，你需要运行 Windows 10 build 18917 或更高版本才能使用 WSL 2，并且你需要安装 WSL（可以在&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;此处&lt;/a&gt;找到相关说明）。&lt;/p&gt;

&lt;h3 id=&quot;启用虚拟机平台可选组件&quot;&gt;启用“虚拟机平台”可选组件&lt;/h3&gt;

&lt;p&gt;以管理员身份打开 PowerShell 并运行：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Enable-WindowsOptionalFeature &lt;span class=&quot;nt&quot;&gt;-Online&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-FeatureName&lt;/span&gt; VirtualMachinePlatform
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;启用这些更改后，你需要重新启动计算机。&lt;/p&gt;

&lt;h3 id=&quot;使用命令行设置要由-wsl-2-支持的发行版&quot;&gt;使用命令行设置要由 WSL 2 支持的发行版&lt;/h3&gt;

&lt;p&gt;在 PowerShell 中运行：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wsl &lt;span class=&quot;nt&quot;&gt;--set-version&lt;/span&gt; &amp;lt;Distro&amp;gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;并确保将 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Distro&amp;gt;&lt;/code&gt; 替换为发行版的实际名称。 （你可以使用以下命令找到它们：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl -l&lt;/code&gt;）。 你也可以通过运行与上面相同的命令随时更改回 WSL 1，但将“&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt;”替换为“&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;”。&lt;/p&gt;

&lt;p&gt;此外，如果你想使 WSL 2 成为默认架构，可以使用以下命令执行此操作：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wsl &lt;span class=&quot;nt&quot;&gt;--set-default-version&lt;/span&gt; 2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这将使你安装的任何新发行版初始化为 WSL 2 发行版。&lt;/p&gt;

&lt;h3 id=&quot;完成验证发行版使用的-wsl-版本&quot;&gt;完成验证发行版使用的 WSL 版本&lt;/h3&gt;

&lt;p&gt;要验证每个发行版使用的 WSL 版本，请使用以下命令：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wsl &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--verbose&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 或者&lt;/span&gt;
wsl &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;你在上面选择的发行版现在应该在“version”列下显示“2”。 现在完成了，你随时可以开始使用你的 WSL 2 发行版了。&lt;/p&gt;

&lt;h2 id=&quot;wsl-2-的体验变化&quot;&gt;WSL 2 的体验变化&lt;/h2&gt;

&lt;p&gt;首次开始使用 WSL 时，你会注意到一些用户体验变化。以下是此预览中两个最重要的变化。&lt;/p&gt;

&lt;h3 id=&quot;将-linux-文件放在-linux-根文件系统中&quot;&gt;将 Linux 文件放在 Linux 根文件系统中&lt;/h3&gt;

&lt;p&gt;确保将 Linux 应用程序中经常访问的文件放在 Linux 根文件系统中，以享受文件性能优势。过去微软一直强调在使用 WSL 1 时将文件放入 C 盘，但 WSL 2 中的情况并非如此。要享受 WSL 2 中更快的文件系统访问权限，这些文件必须放在 Linux 根文件系统里面。而且现在 Windows 应用程序可以访问 Linux 根文件系统（如文件资源管理器！尝试在 Linux 发行版的主目录中运行：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explorer.exe .&lt;/code&gt; 看看会发生什么），这将使这种转换变得更加容易。（之前文章说过在wsl 1中可以访问win中的文件，而在win中访问不到wsl中的文件。）&lt;/p&gt;

&lt;h3 id=&quot;在初始构建中使用动态-ip-地址访问-linux-网络应用程序&quot;&gt;在初始构建中使用动态 IP 地址访问 Linux 网络应用程序&lt;/h3&gt;

&lt;p&gt;WSL 2 做了架构的巨大变更，使用了虚拟化技术，并仍在努力改进网络支持。由于 WSL 2 现在运行在虚拟机中，因此你从 Windows 访问 Linux 网络应用程序需要使用该 VM 的 IP 地址，反之亦然，你需要 Windows 主机的 IP 地址才能从 Linux 中访问 Windows 网络应用程序。 WSL 2 的目标是尽可能使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; 访问网络应用程序！可以在&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.microsoft.com/en-us/windows/wsl/wsl2-ux-changes%23accessing-network-applications&quot;&gt;文档中&lt;/a&gt;找到有关如何执行此操作的完整详细信息和步骤。&lt;/p&gt;

&lt;p&gt;（此特性已更新，详见下面更新的章节）&lt;/p&gt;

&lt;h3 id=&quot;新的-wsl-命令&quot;&gt;新的 WSL 命令&lt;/h3&gt;

&lt;p&gt;WSL 添加了一些新命令选项来帮助控制和查看 WSL 版本和发行版。&lt;/p&gt;

&lt;p&gt;除了上面提到的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--set-version&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--set-default-version&lt;/code&gt; 之外，还有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl --shutdown&lt;/code&gt;
立即终止所有正在运行的发行版和 WSL 2 轻量级实用程序虚拟机。
一般来说，支持 WSL 2 发行版的虚拟机是由 WSL 来管理的，因此会在需要时将其打开并在不需要时将其关闭。但也可能存在你希望手动关闭它的情况，此命令允许你通过终止所有发行版并关闭 WSL 2 虚拟机来执行此操作。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl --list --quiet&lt;/code&gt;
仅列出发行版名称。此命令对于脚本编写很有用，因为它只会输出你已安装的发行版的名称，而不显示其他信息，如默认发行版、版本等。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl --list --verbose&lt;/code&gt;
显示有关所有发行版的详细信息。此命令列出每个发行版的名称，发行版所处的状态以及正在运行的版本。默认发行版标以星号。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;一些更新&quot;&gt;一些更新&lt;/h2&gt;

&lt;h3 id=&quot;win-18945-支持通过localhost访问wsl2容器&quot;&gt;win 18945: 支持通过localhost访问WSL2容器&lt;/h3&gt;

&lt;p&gt;windows 18945之前的WSL2版本，如果我们在其中运行了一个网络服务，例如启动一个WEB服务。想在 Win10 宿主机中访问这个WEB服务，我们先要通过 ip a 或 ifconfig 命令查看其IP地址才能访问，而且更崩溃的是每次重启后再运行WSL2容器，其IP地址和网关会重新分配。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019080302040619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAwODA5Mg==,size_16,color_FFFFFF,t_70&quot; alt=&quot;[](&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这确实是件很麻烦的事情，为此有开发者特意用golang开发了一个windows服务，让用户快捷的获取到WSL2的IP。&lt;/p&gt;

&lt;p&gt;本次更新改进了这个问题，我们在WIN10中能够直接通过localhost 访问到WSL2中的服务，并且WLS2中的网络服务也能绑定到 0.0.0.0 上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/11/25/DHe63NibfBrLICK.png&quot; alt=&quot;wsl2文档.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如：WSL2 容器内启动web服务器，使用python http.server模块启动一个WEB服务
python3 -m http.server，默认端口8000
然后在win10中的web浏览器中访问 http://localhost:8000/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/2019080301494940.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAwODA5Mg==,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;要了解有关用户体验更改的更多信息，请参阅文档：&lt;a href=&quot;https://link.zhihu.com/?target=https%3A//docs.microsoft.com/en-us/windows/wsl/wsl2-ux-changes&quot;&gt;WSL 1 和 WSL 2 之间的用户体验变化&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;win-190281-可在pycharm201902版本使用-wsl2&quot;&gt;win 19028.1: 可在Pycharm2019.02版本使用 wsl2&lt;/h3&gt;

&lt;p&gt;在此版本之前，Pycharm2019.02中解释器选择wsl，若wsl版本为wsl2则程序会直接卡死。&lt;/p&gt;

&lt;p&gt;现在则可以选择wsl2中的python作为解释器。&lt;/p&gt;

&lt;p&gt;要解决卡死问题，又不想升级系统的话 ，可以使用&lt;strong&gt;Pycharm2019.03&lt;/strong&gt;版本，此版本兼容了wsl2，虽然还未正式发行。&lt;/p&gt;

&lt;h2 id=&quot;本人使用中发现-wsl存在的bug&quot;&gt;本人使用中发现 wsl存在的bug&lt;/h2&gt;

&lt;h3 id=&quot;navicat-不能通过localhost直接访问容器内的mysql&quot;&gt;navicat 不能通过localhost直接访问容器内的mysql&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20190803014317151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDAwODA5Mg==,size_16,color_FFFFFF,t_70&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github也有用户反馈了这个问题，官方确认是BUG并正在修复中。&lt;/p&gt;

&lt;p&gt;目前可以使用ssh隧道连接。&lt;/p&gt;

&lt;h3 id=&quot;git-status更新不及时&quot;&gt;git status更新不及时&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/11/25/tY6kP258bho7Rwc.png&quot; alt=&quot;wsl2bug.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这个问题从wsl 1就存在，github很多人提过这个issue,官方还未修复。&lt;/p&gt;

&lt;h2 id=&quot;wsl其他技巧&quot;&gt;wsl其他技巧&lt;/h2&gt;

&lt;h3 id=&quot;ssh连接wsl&quot;&gt;ssh连接wsl&lt;/h3&gt;

&lt;p&gt;打开配置文件:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo vim /etc/ssh/sshd_config&lt;/code&gt;
写入:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-yanl&quot;&gt;Port 2222   				#设置ssh的端口号, 由于22在windows中有别的用处, 尽量不修改系统的端口号
PermitRootLogin yes  		 # 可以root远程登录
PasswordAuthentication yes     # 密码验证登录
AllowUsers sky 				# 远程登录时的用户名
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重启服务:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; sudo service ssh --full-restart&lt;/code&gt;
这个时候你自己电脑上就可以通过ssh连接wsl了, 但是想要在其他的计算机上访问, 就需要系统开放端口了。&lt;/p&gt;

&lt;p&gt;防火墙-&amp;gt;高级设置-&amp;gt;入站规则-&amp;gt;新建规则&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180928162108931?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjdXdi/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;端口-&amp;gt;下一步&lt;/p&gt;

&lt;p&gt;选择tcp  特定本地端口 2222&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20180928162242346?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xjdXdi/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;允许连接, 默认都选上, 下一步填个名字。&lt;/p&gt;

&lt;p&gt;如果你使用的是wsl 1版本到这一步就可以在其他电脑ssh连接了。&lt;/p&gt;

&lt;p&gt;因为wsl2 ip与宿主机ip并不相同，此时还需要在win中添加下端口转发的规则。&lt;/p&gt;

&lt;p&gt;使用管理员权限打开Powershell，输入：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netsh interface portproxy add v4tov4 &lt;span class=&quot;nv&quot;&gt;listenport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2222 &lt;span class=&quot;nv&quot;&gt;listenaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.0.0.0 &lt;span class=&quot;nv&quot;&gt;connectport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2222 &lt;span class=&quot;nv&quot;&gt;connectaddress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;wsl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.ip&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wsl使用完整-桌面版kali&quot;&gt;wsl使用完整 桌面版kali&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/11/25/PfASbVBvnz6wayG.png&quot; alt=&quot;kalipng.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;升级为完整版&quot;&gt;升级为完整版&lt;/h4&gt;

&lt;p&gt;Microsoft Store中直接安装的wsl版kali是阉割版，基本上你想用的软件全都没有，所以需要安装完整版。&lt;/p&gt;

&lt;p&gt;进入wsl 依次输入:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get update
apt-get upgrade
apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;kali-linux-full
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;等待直至结束即可。&lt;/p&gt;

&lt;h4 id=&quot;为wsl安装桌面&quot;&gt;为wsl安装桌面&lt;/h4&gt;

&lt;p&gt;这一步是最骚的，wsl 1和2都支持开桌面版，比开个VM爽多了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;安装 xfce4 和中文支持&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apt-get install xfce4 fonts-noto-cjk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Windows 上安装 VcXsrv
见&lt;a href=&quot;https://sourceforge.net/projects/vcxsrv/&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置输出 
在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.zshrc&lt;/code&gt;(如果用的是原生 bash 就用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.bashrc&lt;/code&gt;) 中添加&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DISPLAY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;:0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;启动桌面&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;startxfce4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;启动后遇到问题, 可以用以下脚本解决&lt;/p&gt;

&lt;blockquote&gt;
  &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; ~/.config/xfce4rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; ~/.cache/sessions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;[1]. &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/wsl2-ux-changes&quot;&gt;官方文档：User Experience Changes Between WSL 1 and WSL 2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2]. &lt;a href=&quot;https://zhuanlan.zhihu.com/p/69121280&quot;&gt;在 Windows 中运行 Linux：WSL 2 使用入门&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3]. &lt;a href=&quot;https://blog.csdn.net/lcuwb/article/details/82885920&quot;&gt;设置WSL可远程连接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[4]. &lt;a href=&quot;https://blog.csdn.net/weixin_44008092/article/details/98254833&quot;&gt;WSL2跟踪 - 18945: 通过localhost直接访问 WSL2 容器中的服务&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[5]. &lt;a href=&quot;https://htharoldht.com/kali-under-wsl/&quot;&gt;WSL 下的 kali&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2019/11/25/win10%E4%BD%BF%E7%94%A8WSL-2/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2019/11/25/win10%E4%BD%BF%E7%94%A8WSL-2/</guid>
        
        <category>wsl2</category>
        
        <category>kali</category>
        
        <category>wsl</category>
        
        <category>pycharm</category>
        
        
      </item>
    
      <item>
        <title>初窥CORB</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;句子迷倒闭了23333
                                —— ulyc&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;初窥corb&quot;&gt;初窥CORB&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cross-Origin Read Blocking (CORB)  跨域读锁&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;演示&quot;&gt;演示&lt;/h2&gt;

&lt;p&gt;任意打开一个网站, 将img标签的src改为另一个域名.就会出现CORB&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/07/qgOjWZ6nKJuHTSF.png&quot; alt=&quot;CORB.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在进一步解释CORB之前, 先来看几个概念&lt;/p&gt;

&lt;h2 id=&quot;cpu预执行cpu-speculation-execution&quot;&gt;CPU预执行（CPU speculation execution）&lt;/h2&gt;

&lt;p&gt;众所周知，CPU执行计算的速度肯定是远大于它读取内存的速度的，这样的结果就是，CPU在对内存读取某些数据的时候，会闲置，这样就造成了浪费。&lt;/p&gt;

&lt;p&gt;为了提高性能，现代基本大部分硬件制造商都引入了预执行这个机制来压榨CPU的性能。大概的意思如下，比如你写了一段代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if(somethingTrueOrFalse) {
  // TODO ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;逻辑上，这个 if 语句内部的代码是否执行，取决于 somethingTrueOrFalse 变量.&lt;/p&gt;

&lt;p&gt;但是注意，这是逻辑上的，CPU在运行这段代码的时候，可不是这样子的。&lt;/p&gt;

&lt;p&gt;它可能会直接跳过判定 somethingTrueOrFalse 是真是假的逻辑，直接执行 if 语句内部的代码，之后反过来再根据 somethingTrueOrFalse 的取值情况作出反应，如果为真，则保留执行结果，如果为假，则撤销执行结果。&lt;/p&gt;

&lt;p&gt;这里对于预执行的描述是极度简化的，不过足够说明概念了。&lt;/p&gt;

&lt;p&gt;CPU 预执行是芯片制造者决定的，为了提升 CPU 使用速度和效率而建的，预执行红利不是轻易就能放弃的，因此，目前或短期来看基本没可能改变。&lt;/p&gt;

&lt;h2 id=&quot;旁路攻击--scaside-channel-attacks&quot;&gt;旁路攻击  SCA(Side-Channel Attacks)&lt;/h2&gt;

&lt;p&gt;在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A2%BC%E5%AD%B8&quot;&gt;密码学&lt;/a&gt;中，&lt;strong&gt;旁道攻击&lt;/strong&gt;又称&lt;strong&gt;侧信道攻击&lt;/strong&gt;、&lt;strong&gt;边信道攻击&lt;/strong&gt;（英语：Side-channel attack）是一种攻击方式，它基于从&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=%E5%AF%86%E7%A2%BC%E7%B3%BB%E7%B5%B1&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;密码系统&lt;/a&gt;的物理特征（如：时延，能耗，电磁，错误消息，频率等）中获取的信息而非&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3%E6%B3%95&quot;&gt;暴力破解法&lt;/a&gt;或是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95&quot;&gt;算法&lt;/a&gt;中的理论性弱点。&lt;/p&gt;

&lt;p&gt;早在 1956 年，英国已经利用 SCA 获取了埃及驻伦敦的加密机。&lt;/p&gt;

&lt;h3 id=&quot;缓冲时延cache-timing旁路&quot;&gt;缓冲时延（Cache Timing）旁路&lt;/h3&gt;

&lt;p&gt;这是旁路攻击的一种,也是跟后来CORB的出现联系比较密切的一种, 这里只介绍这一种旁路攻击,&lt;/p&gt;

&lt;p&gt;缓冲时延 攻击也叫计时攻击（timing attack）,通过内存访问时间的不同来产生的旁路。&lt;/p&gt;

&lt;p&gt;假设访问一个变量，这个变量在内存中，这需要上百个时钟周期才能完成，但如果变量访问过一次，这个变量被加载到缓冲（Cache）中了，下次再访问，可能几个时钟周期就可以完成了.&lt;/p&gt;

&lt;p&gt;举个例子:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;假设小 A 的账户密码是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gyease&lt;/code&gt;，小 B 想破解小 A 的密码，他可以这么做：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;首先他可以先输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aaaaaa&lt;/code&gt;，之后记录一下从点击登录按钮到错误提示的间隔时间（虽然很短，假设有工具可以记录）&lt;/li&gt;
    &lt;li&gt;之后再输入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;baaaaa&lt;/code&gt;，同样记录时间&lt;/li&gt;
    &lt;li&gt;重复以上过程直到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gaaaaa&lt;/code&gt;，会发现从点击登录按钮到错误提示的间隔时间稍微变长了一些&lt;/li&gt;
    &lt;li&gt;之后小 B 即知道小 A 的密码第一位是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g&lt;/code&gt;，之后重复以上步骤即可破解小 A 的密码。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;当然这里的例子很蠢，而且也过于理想化，但足够说明问题。反应快的读者可能马上就会知道为什么在观察 ‘gaaaaa’ 的测量结果后小 B 就会知道小 A 首位密码，这是因为执行校验密码是否正确的代码是需要时间的，因此在理想条件下，首位错误和首位正确第二位错误的反馈结果必然是后者时间略长。&lt;/p&gt;

&lt;h2 id=&quot;幽灵和熔断漏洞spectre-meltdown&quot;&gt;幽灵和熔断漏洞(Spectre &amp;amp;Meltdown)&lt;/h2&gt;

&lt;p&gt;这是2018 年 1 月曝出来的漏洞.&lt;/p&gt;

&lt;p&gt;熔断漏洞是幽灵漏洞的变种, 基本原理就是利用了上述的cpu预执行和缓冲时延旁路.&lt;/p&gt;

&lt;p&gt;这可以称作史诗级的漏洞,具体实施比较复杂,可以参考  &lt;a href=&quot;https://init.blog/archives/1474&quot;&gt;幽灵、熔断漏洞论文《利用旁道攻击读取特权内存》部分翻译&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里举一个简化的例子, 假设我们有以下代码：&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (x &amp;lt; arr1.length) {
  y = arr2[arr1[x]]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个例子在参考链接的文章中你可能会多次见到，这里大概解释一下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;arr1 假设是一个比较小的数组，x 是一个我们定义的索引值变量&lt;/li&gt;
  &lt;li&gt;正常情况下，如果 x 超过 arr1 的长度，程序是要崩溃的，因为它越界了，但是在预执行的前提下，CPU 可能会忽略越界的问题而执行 if 语句内部的代码&lt;/li&gt;
  &lt;li&gt;arr2 是我们提前声明的一个用来储存数据的数组，它储存于内存的另一个区域，它是连续的，而且我们强制它没有拷贝至缓存，只保存于内存（这点在视频中有提及，我这里强调一下）&lt;/li&gt;
  &lt;li&gt;之后我们假设 arr1 中的位于 x 索引出的值是 k，那么在预执行的前提下，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y = arr2[arr1[x]]&lt;/code&gt;等价于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y = arr2[k]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;然后由于我们会把 arr2[k] 这个值付给另一个变量 y，这里其实算是一个访问值的操作，CPU 后将 arr2[k] 位于内存地址的值转入缓存中，而其余元素保留在内存中（因为并未访问）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之后，只需要遍历 arr2 这个数组，当发现某个索引上的值的访问速度远快于其他索引的访问速度时，这个索引”k”既是我们从越界内存中“偷”到的值。至此，一次攻击就完成了，理论上，利用这个漏洞，可以获取缓存区所有地址的值，其中很有可能包含敏感信息，比如密码什么的。&lt;/p&gt;

&lt;h4 id=&quot;普通浏览器中不同的站点可能共享同一个进程&quot;&gt;普通浏览器中，不同的站点可能共享同一个进程&lt;/h4&gt;

&lt;p&gt;在某些情况下，没有实现 Site Isolution 的普通浏览器会出现一个进程里面同时运行多个站点的代码，这就让恶意站点有机可乘。比如恶意站点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.dd.com&lt;/code&gt; 在自己的代码中嵌入 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;iframe src=&quot;https://v.qq.com&quot; frameborder=&quot;0&quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/code&gt;，这时，普通浏览器就会把带有恶意站点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a.dd.com&lt;/code&gt; 的恶意代码 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v.qq.com&lt;/code&gt; 放在同一个内存中运行。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/07/aNeD846jIqFoTd1.png&quot; alt=&quot;share_process.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;如何预防-spectre-和-meltdown-漏洞呢&quot;&gt;如何预防 Spectre 和 Meltdown 漏洞呢？&lt;/h3&gt;

&lt;p&gt;漏洞三大关键点是 CPU 预执行、SCA 和 共享进程。&lt;/p&gt;

&lt;p&gt;预防就得从这三个方面着手。先看 SCA，算法运行时间的变化本质就是源于数据处理，根据时间变化推测运算操作和数据存储位置，因此 SCA 可预防性极低。&lt;/p&gt;

&lt;p&gt;再看 CPU 预执行，性能至少提高 10%，一片可观的红利，芯片厂商如何舍得放弃。&lt;/p&gt;

&lt;p&gt;如此，只能针对共享进程下手了，Site Isolation 便是剥离共享进程的一项技术，采用独立站点独立进程的方式实现，降低漏洞的威胁。&lt;/p&gt;

&lt;h2 id=&quot;site-isolation&quot;&gt;Site Isolation&lt;/h2&gt;

&lt;p&gt;站点隔离保证了不同站点页面始终被放入不同的进程，每个进程运行在一个有限制的沙箱环境中，在该环境中可能会阻止进程接收其它站点返回的某些特殊类型敏感信息，恶意站点不再和正常站点共享进程，这就让恶意站点窃取其它站点的信息变得更加困难。&lt;/p&gt;

&lt;p&gt;从 Chrome 67 开始，已默认启用 Site Isolation，CORB 是其中一项很重要的功能 ，属于一种新的网络平台安全策略。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.yaoyanhuo.com/chrome_process.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;经验证，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Site Isolation&lt;/code&gt; 关于进程独立的原则是 只要一级域名一样，站点实例就共享一个进程，无论子域名是否一样。如果使用 iframe 嵌入了一级域名不一样的跨域站点，则会生成一个新的进程维护该跨域站点运行，这一点同前文介绍的普通浏览器共享进程不同。&lt;/p&gt;

&lt;h4 id=&quot;这是-site-isolation-的进程设计那么其中的-corb-扮演了什么角色呢&quot;&gt;这是 Site Isolation 的进程设计，那么其中的 CORB 扮演了什么角色呢？&lt;/h4&gt;

&lt;p&gt;在同源策略下，Site Isolation 已经很好地隔离了站点，只是还有跨域标签这样的东西存在，敏感数据依旧会暴露，依旧会进驻恶意站点内存空间。
有这样一个场景，用户登录某站点 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some.qq.com&lt;/code&gt;后，又访问了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bad.dd.com&lt;/code&gt; 恶意站点，恶意站点有如下代码，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script src=&quot;some.qq.com/login&quot;&amp;gt;&lt;/code&gt;，跨域请求了原站点的登录请求，此时，普通浏览器会正常返回登录后的敏感信息，且敏感信息会进驻 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bad.dd.com&lt;/code&gt; 内存空间。好不容易站点隔离把各个站点信息分开了，这因为跨域又在一起了。这个时候怎么办呢？&lt;/p&gt;

&lt;p&gt;CORB 来了。&lt;/p&gt;

&lt;h2 id=&quot;corbcross-origin-read-blocking&quot;&gt;CORB（Cross-Origin Read Blocking）&lt;/h2&gt;

&lt;p&gt;chromium 文档中关于它的定义：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;an algorithm by which dubious cross-origin resource loads may be identified and blocked by web browsers before they reach the web page.&lt;/p&gt;

  &lt;p&gt;浏览器在加载可以跨域资源时，在资源载入页面之前，对其进行识别和拦截的算法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样一来, 敏感信息既不会暴露于浏览器，也不会进驻内存空间，安全性就得到了一定的保证。&lt;/p&gt;

&lt;h3 id=&quot;哪些内容类型受-corb-保护&quot;&gt;哪些内容类型受 CORB 保护&lt;/h3&gt;

&lt;p&gt;当前有三种内容类型受保护，分别是 json、html 和 xml。&lt;/p&gt;

&lt;p&gt;关于如何针对每种内容类型 CORB 如何对其进行保护，&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/services/network/cross_origin_read_blocking_explainer.md&quot;&gt;文档&lt;/a&gt;中有详细的章节进行介绍，这里就不多说了。&lt;/p&gt;

&lt;h3 id=&quot;corb-发生时机&quot;&gt;CORB 发生时机&lt;/h3&gt;

&lt;p&gt;当跨域请求回来的数据 MIME type 同跨域标签应有的 MIME 类型不匹配时，浏览器会启动 CORB 保护数据不被泄漏，被保护的数据类型只有 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;。很明显 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 等跨域标签应有的 MIME type 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;html&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; 不一样。&lt;/p&gt;

&lt;h3 id=&quot;mime-type-multipurpose-internet-mail-extensions&quot;&gt;MIME type (Multipurpose Internet Mail Extensions)&lt;/h3&gt;

&lt;p&gt;MIME type 同 CORB 有着相当紧密的关系，可以说 CORB 的产生直接依附 MIME 类型。因此，阅读本文前，有必要先理解一下什么是 MIME type。&lt;/p&gt;

&lt;p&gt;MIME 是一个互联网标准，扩展了电子邮件标准，使其可以支持更多的消息类型。常见 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIME&lt;/code&gt; 类型如：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text/html&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text/plain&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;image/png&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;application/javascript&lt;/code&gt; ，用于标识返回消息属于哪一种文档类型。写法为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type/subtype&lt;/code&gt;。
在 HTTP 请求的响应头中，以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type: application/javascript; charset=UTF-8&lt;/code&gt; 的形式出现，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIME type&lt;/code&gt; 是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; 值的一部分。如下图，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.yaoyanhuo.com/crob_01.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;内容嗅探技术mime-sniffing&quot;&gt;内容嗅探技术（MIME sniffing）&lt;/h4&gt;

&lt;p&gt;内容嗅探技术是指 当响应头没有指明 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIME type&lt;/code&gt; 或 浏览器认为指定类型有误时，浏览器会对内容资源进行检查并执行，来猜测内容的正确&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIME&lt;/code&gt;类型。嗅探技术的实现细节，不同的浏览器在不同的场景下有不同的方式，本文不做详述。详细内容参见：&lt;a href=&quot;https://www.keycdn.com/support/what-is-mime-sniffing&quot;&gt;https://www.keycdn.com/support/what-is-mime-sniffing&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;如何禁用&quot;&gt;如何禁用&lt;/h5&gt;

&lt;p&gt;服务器在响应首部添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-Content-Type-Options: nosniff&lt;/code&gt;，用来告诉浏览器一定要相信 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt;中指定的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIME&lt;/code&gt; 类型，不要再使用内容嗅探技术探测响应内容类型。该方法仅对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;style&amp;gt;&lt;/code&gt;有效。&lt;/p&gt;

&lt;p&gt;官方解释：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#MIME_sniffing&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types#MIME_sniffing&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;浏览器如何判断响应内容是否需要-corb-保护&quot;&gt;浏览器如何判断响应内容是否需要 CORB 保护？&lt;/h3&gt;

&lt;p&gt;CORB 会根据如下步骤来确定是否对 response 进行保护（如果响应的内容格式是 json、html 或者 xml）:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果 response 包含 X-Content-Type-Options: nosniff 响应头部，那么如果 Content-Type 是以下几种的话， response 将受 CORB 保护：
    &lt;ul&gt;
      &lt;li&gt;html mime type&lt;/li&gt;
      &lt;li&gt;xml mime type（除了 image/svg+xml）&lt;/li&gt;
      &lt;li&gt;json mime type&lt;/li&gt;
      &lt;li&gt;text/plain&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;如果 response 的状态是 206，那么如果 Content-Type 是以下几种的话， response 将受 CORB 保护：
    &lt;ul&gt;
      &lt;li&gt;html mime type&lt;/li&gt;
      &lt;li&gt;xml mime type（除了 image/svg+xml）&lt;/li&gt;
      &lt;li&gt;json mime type&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;否则，CORB 将尝试探测 response 的 body：
    &lt;ul&gt;
      &lt;li&gt;html mime type，并且探测结果是 html 内容格式，response 受 CORB 保护&lt;/li&gt;
      &lt;li&gt;xml mime type（除了 image/svg+xml）, 并且探测结果是 xml 内容格式，response 受 CORB 保护&lt;/li&gt;
      &lt;li&gt;json mime type，并且探测结果是 json 内容格式，response 受 CORB 保护&lt;/li&gt;
      &lt;li&gt;text/plain，并且探测结果是 json、html 或者 xml 内容格式，response 受 CORB 保护&lt;/li&gt;
      &lt;li&gt;任何以 JSON security prefix 开头的 response（除了 text/css）受 CORB 保护&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里值得一提的是，对于探测是必须的，以防拦截了那些依赖被错误标记的跨源响应的页面（比如，图片资源但是格式却被标记为 text/html）。如果不进行格式探测，那么会有16倍以上的 response 被拦截。&lt;/p&gt;

&lt;h4 id=&quot;html-mime-type--xml-mime-typejson-mime-type-的出现能理解为什么-textplain-类型也会在保护范围内&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML MIME type&lt;/code&gt; 、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;XML MIME type&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;JSON MIME type&lt;/code&gt; 的出现能理解，为什么 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text/plain&lt;/code&gt; 类型也会在保护范围内？&lt;/h4&gt;

&lt;p&gt;因为 当 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; 缺失的时候，响应内容 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MIME type&lt;/code&gt; 有可能就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text/plain&lt;/code&gt;；且据可靠数据显示， HTML, JSON, or XML 有时候也会被标记为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;text/palin&lt;/code&gt;。如，&lt;/p&gt;

&lt;p&gt;data.txt&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;ret_code&quot;: 0,
  &quot;msg&quot;: &quot;请求成功！&quot;,
  &quot;data&quot;: [1, 2, 3, 4, 5]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;server.js&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;app.get('/file', function getState(req,res,next){
  // res.type('json')
  res.sendfile(`${__dirname}/public/data.txt`)
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如上代码，启动 server.js ，Chrome 浏览器跨域标签&lt;script&gt;访问 `/file` 时服务返回 `data.txt` 内容，尽管响应头是 `Content-Type: text/plain; charset=UTF-8`，响应内容依旧能被识别为 `json`。由此， `text/plain` 会作为 `json` 的标记也是一种常见现象。如果跨域访问 `/file` 就会出现 CORB，验证结果如下图，&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://img.yaoyanhuo.com/blog/corb_text_plain.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;corb-如何拦截一个响应&quot;&gt;CORB 如何拦截一个响应&lt;/h3&gt;

&lt;p&gt;当一个 response 被 CORB 保护时，它的 body 会被覆盖为空，同时 headers 也会被移除（当前 Chrome 仍然会保留 Access-Control-* 相关的 headers）。&lt;/p&gt;

&lt;p&gt;关于 CORB 的工作方式，一定要和 CORS 做区分，因为它要防止这些被拦截的数据进入渲染当前页面进程的内存中，所以它一定不会被加载并读取。&lt;/p&gt;

&lt;p&gt;这不同于 CORS，因为后者会做一些过滤操作，数据虽然不可被加载，但是可能仍然保留在渲染进程的内存中。&lt;/p&gt;

&lt;h2 id=&quot;对于其他-web-平台特性的影响&quot;&gt;对于其他 web 平台特性的影响&lt;/h2&gt;

&lt;p&gt;这里仍然是翻译部分文档中的内容，因为本身写的就很细致了。&lt;/p&gt;

&lt;p&gt;CORB 不会影响以下技术场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;XHR and fetch()
    &lt;ul&gt;
      &lt;li&gt;CORB 并不会产生显而易见的影响，因为 XHR 和 fetch() 在响应中已经应用了同源策略（比如：CORB 应该仅会拦截那些因缺少 CORS 而发生跨域 XHR 错误的 response）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Prefetch
    &lt;ul&gt;
      &lt;li&gt;CORB 会拦截那些到达跨域渲染进程的 response body，但是不会阻止那些被浏览器进程缓存的 response body（然后传递到另一个同源渲染进程）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Tracking and reporting
    &lt;ul&gt;
      &lt;li&gt;当前存在各种各样的技术，尝试对记录用户访问的服务器发送 web 请求，以检查用户是否已访问某些内容。该请求经常使用隐藏的 img 标签进行发送（我前文提及了），然后服务器以 204 状态码或者 html 文档进行响应。除了 img，还可以使用类似 script、style 和别的可用标签。&lt;/li&gt;
      &lt;li&gt;CORB 不会对这些技术场景造成影响，因为它们不会依赖于服务器返回响应的内容。这一点同样使用与其他类似的技术场景和 web 特性，只要它们不关心响应即可，比如：beacons，ping，CSP违规报告 等。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Service workers
    &lt;ul&gt;
      &lt;li&gt;Service workers 可以拦截跨源 requests 并在其内部人为地构建 response（没有跨源和安全边界），CORB 不会拦截它们。&lt;/li&gt;
      &lt;li&gt;当 Service workers 确实缓存了一些跨源的 responses 时，由于这些 responses 对于调用者来讲是透明的，因此 CORB 会拦截它们，但是这并不需要对 Service Worker 作出任何改变。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Blob and File API
    &lt;ul&gt;
      &lt;li&gt;即使没有 CORB 的话，获取跨源的 blob URLs 当前也会被拦截。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Content scripts and plugins
    &lt;ul&gt;
      &lt;li&gt;它们所属的范围并不含在 CORB 的职责内 —— CORB 假设已经有某种合适的安全策略或安全机制存在于这些 content scripts 和 plugins 中（比如 Adobe Flash 已经实现了类似 CORB 的机制，通过 crossdomain.xml）。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ps&quot;&gt;PS&lt;/h3&gt;

&lt;p&gt;需要注意的是, 幽灵和熔断漏洞是硬件层面的,软件层面只能做很有限的防护.&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;本文基本只是将参考链接中的文章 按照我自己容易理解的方式重组了一下， 版权归链接中原作者所有。&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;[1].&lt;a href=&quot;https://juejin.im/post/5b7e826ee51d4538b35c04e8&quot;&gt;30 分钟理解 CORB 是什么&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2].&lt;a href=&quot;https://zhuanlan.zhihu.com/p/32784852&quot;&gt;给程序员解释Spectre和Meltdown漏洞&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] &lt;a href=&quot;http://www.yaoyanhuo.com/blog/corb/&quot;&gt;妖艳货的技术博客 Cross-Origin Read Blocking (CORB)&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2019/08/01/%E5%88%9D%E7%AA%A5CORB/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2019/08/01/%E5%88%9D%E7%AA%A5CORB/</guid>
        
        <category>CORB</category>
        
        <category>Chrome</category>
        
        <category>前端</category>
        
        <category>幽灵熔断</category>
        
        
      </item>
    
      <item>
        <title>19年上半年Go语言使用笔记</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;语言须能精致准确表达出想要表达的对象。&lt;/p&gt;

  &lt;p&gt;举例来说，好小说家不该滥用“不可思议”“难以捉摸”等词，因为他有责任把这种“不可思议”与“难以捉摸”写清楚，传达给读者。
​                                                              							—— F.R.利维斯 《伟大的传统》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;19年上半年go语言使用笔记&quot;&gt;19年上半年Go语言使用笔记&lt;/h1&gt;

&lt;p&gt;公司里新项目基本都换成了Go语言,，老项目有条件的也在慢慢用Go重构。&lt;/p&gt;

&lt;p&gt;所以这大半年除了偶尔维护Python2老代码的时候还写下Python,  其他大部分时间基本都在写JS和Go。:stuck_out_tongue:&lt;/p&gt;

&lt;p&gt;下面是 半年来使用中记的一些记录，整理了下发出来。&lt;/p&gt;

&lt;h2 id=&quot;1-发送get以外的额请求&quot;&gt;1. 发送Get以外的额请求&lt;/h2&gt;

&lt;p&gt;以 PATCH方法为例：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;  

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  
   &lt;span class=&quot;s&quot;&gt;&quot;bytes&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;compress/gzip&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;encoding/json&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;io/ioutil&quot;&lt;/span&gt;
   &lt;span class=&quot;s&quot;&gt;&quot;net/http&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;js&quot;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;gwIp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.1.1.1&quot;&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;stateChangeBody&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`{&quot;region&quot;:&quot;`&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`&quot;,&quot;gw_ip&quot;:&quot;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gwIp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;`&quot;}`&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateChangeBytes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateChangeBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;c&quot;&gt;//stateChangeBody 若使用结构体 , stateChangeBytes就用 json.Marshal(stateChangeBody)&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;body:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateChangeBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;stateChangeReq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PATCH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8000/api/gateway/state&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;bytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewBuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateChangeBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;//请求的body是 io.reader interface，需要实现&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//strings.NewReader  byte.NewReader bytes.NewBuffer  实现了read 方法&lt;/span&gt;
    

   &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;stateChangeResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateChangeReq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	
    &lt;span class=&quot;c&quot;&gt;// 若响应使用gzip 编码 ,需要使用gzip.NewReader 解压, &lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;//reader, err := gzip.NewReader(stateChangeResp.Body)&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;//if err != nil {&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;//	return nil, fmt.Errorf(&quot;GZIP Read ERROR %s&quot;, err.Error())&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;//}&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;//Response, err := ioutil.ReadAll(reader)&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;//if err != nil {&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;//	return nil, fmt.Errorf(&quot;BODY READ ERR %s&quot;, err.Error())&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;//}&lt;/span&gt;
    
   &lt;span class=&quot;n&quot;&gt;stateChangeResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateChangeResp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;c&quot;&gt;//fmt.Println(&quot;response Body:&quot;, string(stateChangeRespData))&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateChangeRespData&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unmarshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateChangeResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stateChangeRespData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;response err:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateChangeRespData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;res&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;response err:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;无数据&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stateChangeRespData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;res&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;faild&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result:&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;更新失败&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-invalid-character--looking-for-beginning-of-value&quot;&gt;2. invalid character ‘&amp;lt;’ looking for beginning of value&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json.Unmarshal()&lt;/code&gt;反序列化时出现。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
   &lt;span class=&quot;n&quot;&gt;timeStamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006/01/02 15:04&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;probe_duration_seconds&quot;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.1.1.1&quot;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;probeIpApi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;http://api/ip?start_time=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeStamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;end_time=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeStamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;metric=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;ip=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;  
    
   &lt;span class=&quot;n&quot;&gt;probeIpResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probeIpApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;请求API失败&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
   &lt;span class=&quot;k&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probeIpResp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
   &lt;span class=&quot;n&quot;&gt;probeIpRespBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioutil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probeIpResp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;请求API io读取失败&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  
   &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probeIpRespBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;  

   &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probeIpRespDat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;make&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unmarshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probeIpRespBody&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probeIpRespDat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;请求API 反序列化失败&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;ipConnectedness&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;probeIpRespDat&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ipConnectedness&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;原因&quot;&gt;原因&lt;/h3&gt;

&lt;p&gt;打印出来返回的结果是&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-&amp;lt;html&amp;gt;&quot;&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;502 Bad Gateway&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回的为html时会报这个错误。&lt;/p&gt;

&lt;p&gt;而未返回结果的原因是，url中的time含有空格导致。&lt;/p&gt;

&lt;h3 id=&quot;解决&quot;&gt;解决&lt;/h3&gt;

&lt;p&gt;确保返回的数据正确就可解决。&lt;/p&gt;

&lt;p&gt;还有确保请求时的url正确编码有两种方法。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将url拼完后进行一次编码：
    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;probeIpApi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;http://api/ip?start_time=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeStamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;end_time=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeStamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;metric=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;ip=&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;  
   
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;probeIpApi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RawQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;//urlencode&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;probeIpResp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;将ulr中参数通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;URL.Query()&lt;/code&gt;添加：
    &lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NewRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://api/ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
   
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;start_time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;end_time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end_time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;metric&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RawQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：此种方法会将 空格 编码为“+”而不是“%20”。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.w3.org/TR/html4/interact/forms.html#h-17.13.4.1&quot;&gt;W3C标准规定&lt;/a&gt;，当&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Content-Type为application/x-www-form-urlencoded&lt;/code&gt;时，URL中查询参数名和参数值中空格要用加号 “+” 替代，所以几乎所有使用该规范的浏览器在表单提交后，URL查询参数中空格都会被编成加号”+”。&lt;/p&gt;

&lt;p&gt;而在另一份规范(&lt;a href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;RFC 2396&lt;/a&gt;，定义URI)里, URI里的保留字符都需转义成&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%HH&lt;/code&gt;格式(Section 3.4 Query Component)，因此空格会被编码成”%20”，加号”+”本身也作为保留字而被编成”%2B”。&lt;/p&gt;

&lt;p&gt;对于某些遵循RFC 2396标准的应用来说，它可能不接受查询字符串中出现加号”+”，认为它是非法字符。所以一个安全的举措是URL中统一使用”%20”来编码空格字符。&lt;/p&gt;

&lt;p&gt;上面的例子中可以在最后，再调用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;replaceAll(&quot;\\+&quot;, &quot;%20&quot;)&lt;/code&gt;，将所有加号+替换为%20。&lt;/p&gt;

&lt;h2 id=&quot;3get-resource-list-err-client-do-error-post--unsupported-protocol-scheme&quot;&gt;3.Get Resource List Err: CLIENT DO ERROR Post : unsupported protocol scheme&lt;/h2&gt;

&lt;p&gt;request 发送请求时, 目标url不合法.&lt;/p&gt;

&lt;p&gt;两次遇到这个问题,由于配置中  本地测试时  高危的url注释未打开.&lt;/p&gt;

&lt;h2 id=&quot;4结构体的坑之大小写&quot;&gt;4.结构体的坑之大小写&lt;/h2&gt;

&lt;p&gt;结构体名字没有首字母大写别的包无法调用&lt;/p&gt;

&lt;p&gt;struct的属性是否被导出，遵循大小写的原则：首字母大写的被导出，首字母小写的不被导出。&lt;/p&gt;

&lt;p&gt;所以：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;如果struct名称首字母是小写的，这个struct不会被导出。连同它里面的字段也不会导出，即使有首字母大写的字段名&lt;/strong&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;如果struct名称首字母大写，则struct会被导出，但只会导出它内部首字母大写的字段，那些小写首字母的字段不会被导出&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是这里有一个特殊情况（这个限制不仅仅是结构体），当你有另一个首字母大写的结构体Test，包含了一个首字母小写的结构体test类型的参数，那么就够在包外通过调用这个首字母大写的结构体，间接的调用这个首字母小写的结构体的内容（前提必须是参数首字母大写）&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Test1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitHi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;结构体中参数首字母没有大写时，别的包虽然可以调用这个结构体，但是找不到这个结构体中没有首字母大写的参数。&lt;/p&gt;

&lt;h2 id=&quot;5float类型精确度保留小数位数&quot;&gt;5.float类型精确度(保留小数位数)&lt;/h2&gt;

&lt;p&gt;Go没有python那样现成的内置函数, 比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;round(number , n)&lt;/code&gt;或者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Decimal&lt;/code&gt;包, 只能自己封装啦:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;转换成字符串截取再转为float&quot;&gt;转换成字符串,截取,再转为float&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FloatRound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
   &lt;span class=&quot;n&quot;&gt;format&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strconv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Itoa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;f&quot;&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strconv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ParseFloat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h4 id=&quot;用math包&quot;&gt;用math包&lt;/h4&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Round&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
	&lt;span class=&quot;n&quot;&gt;n10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pow10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Trunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n10&lt;/span&gt;  
    
    &lt;span class=&quot;c&quot;&gt;//Trunc保留整数部分&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;//比如1.5334要保留一位的话, (1.5334*10)保留整数位,再除以 10 就可以了,加0.5是为了四舍五入.&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-go中时间戳相关&quot;&gt;6. Go中时间戳相关&lt;/h2&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;strconv&quot;&lt;/span&gt;
	&lt;span class=&quot;s&quot;&gt;&quot;time&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;timwStamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  								
	&lt;span class=&quot;c&quot;&gt;//timwStamp: 2019-05-13 17:19:37.3712671 +0800 CST m=+0.008498901 ,  &lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;//type: time.Time&lt;/span&gt;
    
	&lt;span class=&quot;n&quot;&gt;timeStampUnix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Now&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  					
       &lt;span class=&quot;c&quot;&gt;//timwStamp--Unix:  1557739177&lt;/span&gt;
       &lt;span class=&quot;c&quot;&gt;//type  :  int64&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;timeString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strconv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormatInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeStamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  			
    	&lt;span class=&quot;c&quot;&gt;//timeString:  1557739177&lt;/span&gt;
   	&lt;span class=&quot;c&quot;&gt;//type: string&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;timeNow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeStamp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  					
    	&lt;span class=&quot;c&quot;&gt;//timwNow--Unix :  2019-05-13 17:19:37 +0800 CST&lt;/span&gt;
   	&lt;span class=&quot;c&quot;&gt;//type: time.Time&lt;/span&gt;
    
	&lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeNow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006-01-02 15:04:05&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;//lastTime:   2019-05-13 17:19:37&lt;/span&gt;
   	 &lt;span class=&quot;c&quot;&gt;//type: time.Time&lt;/span&gt;
    
	&lt;span class=&quot;n&quot;&gt;timeParse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2006-01-02 15:04:05&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
    	&lt;span class=&quot;c&quot;&gt;//timeParse:   0001-01-01 00:00:00 +0000 UTC&lt;/span&gt;
    	&lt;span class=&quot;c&quot;&gt;// type: time.Time&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;7go语音中单引号和双引号区别及rune类型&quot;&gt;7.Go语音中单引号和双引号区别,及rune类型&lt;/h2&gt;

&lt;p&gt;Go语言的字符串类型&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;在本质上就与其他语言的字符串类型不同：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Java的String、C++的std::string以及Python3的str类型都只是定宽字符序列&lt;/li&gt;
  &lt;li&gt;Go语言的字符串是一个用UTF-8编码的变宽字符序列，它的每一个字符都用一个或多个字节表示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即：&lt;strong&gt;一个Go语言字符串是一个任意字节的常量序列&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;Golang的双引号和反引号都可用于表示一个常量字符串，不同在于：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;双引号用来创建可解析的字符串字面量(支持转义，但不能用来引用多行)&lt;/li&gt;
  &lt;li&gt;反引号用来创建原生的字符串字面量，这些字符串可能由多行组成(不支持任何转义序列)，原生的字符串字面量多用于书写多行消息、HTML以及正则表达式&lt;/li&gt;
  &lt;li&gt;单引号则用于表示Golang的一个特殊类型：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rune&lt;/code&gt;，类似其他语言的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;byte&lt;/code&gt;但又不完全一样，是指：&lt;strong&gt;码点字面量（Unicode code point）&lt;/strong&gt;，不做任何转义的原始内容。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大部分能查到的资料就到此为止,没有解释&lt;strong&gt;码点字面量&lt;/strong&gt;到底是什么.&lt;/p&gt;

&lt;p&gt;官方文档解释:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;rune is an alias for int32 and is equivalent to int32 in all ways.&lt;/p&gt;

  &lt;p&gt;//int32的别名,几乎在所有方面等同于int32&lt;/p&gt;

  &lt;p&gt;It is  used, by convention, to distinguish character values from integer values.&lt;/p&gt;

  &lt;p&gt;//它用来区分字符值和整数值&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在Go中 ,&lt;strong&gt;byte&lt;/strong&gt; 是 ` uint8 `的别名,常用来处理ascii字符;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rune&lt;/code&gt;的命名应该来自于北欧的『如尼文字』,是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int32&lt;/code&gt;的别名,表示一个Unicode码点.&lt;/p&gt;

&lt;p&gt;被大部分人转载的所谓”码点字面量”其实是翻译的锅.&lt;/p&gt;

&lt;p&gt;有关&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rune&lt;/code&gt;类型,相信看完下面的例子就会明白:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	     &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;  
	     &lt;span class=&quot;c&quot;&gt;// value:  97			即ASCII 编码为 97&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// type:   uint8&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// length:   binary.Size(a) == 1			&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;//			 unsafe.Sizeof(a) == 1&lt;/span&gt;
        
	     &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;rune&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'你'&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;// 注意: 此处只能用 『单引号』&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// value:  20320		即Unicode 码为 20320&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// type:   int32/rune&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// length:  binary.Size(c) == 4        &lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;//   	    unsafe.Sizeof(c) == 4&lt;/span&gt;
        
	     
	     &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'b'&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// value:  98&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// type:   int32/rune&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// length:  binary.Size(b) == 11&lt;/span&gt;
	     
	     &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'我'&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// value:  25105&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// type:   int32/rune&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// length: binary.Size(d) == 4&lt;/span&gt;
      
	     &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;e&quot;&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// value:  e&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// type:   string&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// length:  len(e)  == 1&lt;/span&gt;
        
	     &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;他&quot;&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// value:  他&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// type:   string&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// length:   len(f)  == 3&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// len([]rune(f))  == 1&lt;/span&gt;
	     &lt;span class=&quot;c&quot;&gt;// utf8.RuneCountInString(f) == 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rune&lt;/code&gt; 类型就像文档中说的那样,  主要用于『字符值』而不是『整数值』.&lt;/p&gt;

&lt;p&gt;在这个例子中,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; len(f)  == 3&lt;/code&gt;是因为Golang中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;底层是通过&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]byte&lt;/code&gt;实现的。&lt;/p&gt;

&lt;p&gt;中文字符在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unicode&lt;/code&gt;下占2个字节，在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf-8&lt;/code&gt;编码下占3个字节  (编码问题可参见之前文章 &lt;a href=&quot;https://ulyc.github.io/2018/08/01/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E6%B5%85%E8%B0%88%E5%8F%8Apython%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/&quot;&gt; 字符编码浅谈及Python中的编码问题&lt;/a&gt; )，而Golang默认编码正好是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;utf-8&lt;/code&gt;。&lt;/p&gt;

&lt;h4 id=&quot;ps&quot;&gt;ps:&lt;/h4&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uint&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;uintptr&lt;/code&gt; 在 32 位系统上通常为 32 位宽( 4字节 )，在 64 位系统上则为 64 位宽( 8字节)。&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// unsafe.Sizeof(z) == 8     我的是64位系统&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// unsafe.Sizeof总是在编译期就进行求值，而不是在运行时&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;8--slice-被jsonitermarshal转换为null期望保留为空slice&quot;&gt;8 . slice [],被jsoniter.Marshal()转换为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;,期望保留为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[]&lt;/code&gt;空slice&lt;/h2&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stuct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}}&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      
    &lt;span class=&quot;n&quot;&gt;buf2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Marshal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buf2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;   
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Value&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]}&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;9-利用map去重&quot;&gt;9. 利用Map去重&lt;/h2&gt;

&lt;p&gt;Go没有python中&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt;这种数据结构.&lt;/p&gt;

&lt;p&gt;不过当有用到类似&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt;的需求时, 可以直接make 一个map, 将item 设置为key.&lt;/p&gt;

&lt;p&gt;value 可以设置为布尔值或者其他 , 这样就可以不用每次都去遍历数组,就可以新添加的item是否与之前的重复.&lt;/p&gt;

&lt;h2 id=&quot;10-组合和继承&quot;&gt;10. 组合和继承&lt;/h2&gt;

&lt;p&gt;刚开始用Go的时候，由于它不支持完全的面向对象，是怎么用怎么 难受…&lt;/p&gt;

&lt;p&gt;Go中没有继承的概念,  它是通过接口来实现类似功能。&lt;/p&gt;

&lt;p&gt;Go中还有一种叫做组合的概念,看如下代码&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;
  
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;fmt&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;c&quot;&gt;// nothing&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;showA&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShowB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;showB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Derived&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ShowB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Derived showB&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ShowA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;输出结果为：&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;showA&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;showB&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到,结果并没有输出 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Derived showB&quot;&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;上面的Derived包含了Base，自动的含有了Base的方法，因为其不是继承，所以不会根据具体传入的对象而执行对应的方法。&lt;/p&gt;

&lt;p&gt;Python中的类继承表示Base是Derived的一个父类，具有一种&lt;strong&gt;层次关系。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但是Go的组合则是一种 &lt;strong&gt;包含关系&lt;/strong&gt;，是Derived 包含了Base，所以Derived的实例可以使用Base的所有方法。&lt;/p&gt;

</description>
        <pubDate>Thu, 06 Jun 2019 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2019/06/06/19%E5%B9%B4%E4%B8%8A%E5%8D%8A%E5%B9%B4GO%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2019/06/06/19%E5%B9%B4%E4%B8%8A%E5%8D%8A%E5%B9%B4GO%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
        
        <category>Golang</category>
        
        <category>Go</category>
        
        <category>rune类型</category>
        
        <category>组合</category>
        
        
      </item>
    
      <item>
        <title>盲水印和图片隐写术</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;The shadow is within.
​                                                              —— 劫  《 英雄联盟》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;盲水印和图片隐写术&quot;&gt;盲水印和图片隐写术&lt;/h1&gt;

&lt;h2 id=&quot;盲水印&quot;&gt;盲水印&lt;/h2&gt;

&lt;h3 id=&quot;一演示&quot;&gt;一、演示&lt;/h3&gt;

&lt;p&gt;首先看 这是一张女朋友&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd152cce839e.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;解码水印&quot;&gt;解码水印&lt;/h5&gt;

&lt;p&gt;接下来我们输入一行神奇的命令:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python bwm.py --action decode --origin Demo.jpg --im ../Gakki.jpg --result res.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可以得到这样的一张图:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd15424887d7.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;以后谁再跟你抢女朋友就可以这样声明版权了嘿嘿.&lt;/p&gt;

&lt;p&gt;(脚本和原图都在最后的附录里, 有兴趣的朋友只需要将上面的图片保存为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Demo.jpg&lt;/code&gt;,附录里的原图保存为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gakki.jpg&lt;/code&gt;, 就可以解码出上面的信息)&lt;/p&gt;

&lt;h5 id=&quot;加密水印&quot;&gt;加密水印&lt;/h5&gt;

&lt;p&gt;通过今天的方法你可以将信息放入任意图片,来达到加密信息的目的.&lt;/p&gt;

&lt;p&gt;附录里的脚本, 加密用法:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python bwm.py --action encode --origin Gakki.jpg --im wm1.png --result Demo.jpg --alpha 2&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;二用途&quot;&gt;二、用途&lt;/h3&gt;

&lt;p&gt;上面 的水印就叫做&lt;strong&gt;盲水印&lt;/strong&gt;，隐藏式的水印是以数字数据的方式加入音频、图片或影片中，但在一般的状况下无法被看见。隐藏式水印的重要应用之一是保护版权，期望能借此避免或阻止数字媒体未经授权的复制和拷贝。&lt;/p&gt;

&lt;h5 id=&quot;1不同人加相同水印&quot;&gt;1.不同人加相同水印&lt;/h5&gt;

&lt;p&gt;声明版权&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;应用案例&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;某些画师、摄影师、设计师会在其作品中加入水印。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;13年左右有位自称是“超写实主义”的画家，声称自己纯手工画的画写实程度可以超过摄影机，并开办培训班敛财。

后被一位加了盲水印的摄影师戳穿，原来其“画作”都是直接将照片用ps处理成手绘质感的图。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;淘宝防盗图功能&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;淘宝卖家图会被淘宝自动打上水印，如果有别的卖家存图作为自己的图上传会被检测出。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;2不同人加不同水印&quot;&gt;2.不同人加不同水印&lt;/h5&gt;

&lt;p&gt;将某份保密数字资料发送给不同人时，可加上不同标识，如果资料被复制、传播可根据解码出的唯一标识来追究责任人。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;应用案例&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;电影刚刚公映时，每个影院，影厅的 电影底片里都会加入不同的不可见水印， 如果电影流出，就可追究相关影院责任。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;阿里，华为等公司内部论坛、平台会在HTML页面中加入足够数量 及不被发现的唯一标识。当有内部敏感信息通过截图等方式流出，也可追踪到个人。&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;比如著名的“阿里月饼门”。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd150482c379.png&quot; alt=&quot;1551441624605&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三原理&quot;&gt;三、原理&lt;/h3&gt;

&lt;h4 id=&quot;原理图&quot;&gt;原理图&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-bbecf64a76b3dbfc4539e38e46ad8223_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;傅里叶变换&quot;&gt;傅里叶变换&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;简单复习下傅里叶变换&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;傅里叶变换简单地说就是将信号在&lt;strong&gt;时域&lt;/strong&gt;或&lt;strong&gt;空域&lt;/strong&gt;的函数转变到&lt;strong&gt;频域&lt;/strong&gt;表示，在和工程学中有许多应用。因其基本思想首先由法国学者约瑟夫·傅里叶系统地提出。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;再理解下时域和频域&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/7/72/Fourier_transform_time_and_frequency_domains_%28small%29.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pic2.zhimg.com/40cf849e55ed95732a60b52d4019d609_b.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么，傅里叶变换有什么用呢，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;先在纸上画一个sin（x），不一定标准，意思差不多就行。不是很难吧。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;好，接下去画一个sin（3x）+sin（5x）的图形。这个就很难能画得出来。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;现在把sin（3x）+sin（5x）的曲线给你，只看图是看不出这整个曲线的方程式是怎样的，现在需要将把sin（5x）从图里拿出去，看看剩下的是什么。这基本是不可能做到的。&lt;/p&gt;

&lt;p&gt;但是在频域呢？则简单的很，无非就是几条竖线而已。&lt;/p&gt;

&lt;p&gt;这是最简单的一种用法，其他复杂用法不在此赘述。&lt;/p&gt;

&lt;h4 id=&quot;频谱图&quot;&gt;频谱图&lt;/h4&gt;

&lt;p&gt;一维信号的变换理解之后，那么图像的频谱图长什么样呢。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd15151a620d.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd1515137a38.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图片中明亮的部分就是低频（平缓）部分，暗点的是高频（突变交界）部分。一般为了展示会把频谱图低频的部分移到中心。频谱图上的点跟原图不存在一一对应关系，频谱图的每一点都来自于全部的图像（类似于时域曲线的点，和频域图的点）。&lt;/p&gt;

&lt;p&gt;这样可能还不够直观，接下来看这张图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/07/j3kg4ApHQZFr9DB.jpg&quot; alt=&quot;bg2017121301.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这是一张400x400的图，共有16 万个像素点。&lt;/p&gt;

&lt;p&gt;我们平时怎么来表示一张图片呢，首先是在笛卡尔坐标系中用x,y来定位某一确定的点。那么，我们怎么来描述这个点呢？&lt;/p&gt;

&lt;p&gt;我们知道，所有的色彩都是由三原色组成。生活中经常说的红、黄、蓝（青），其实是一种消减型的三原色，光学中的三原色是红、绿、蓝，也就是R、G、B。&lt;/p&gt;

&lt;p&gt;通常我们用来描述图像点的方法就是RGB的值，其实图像处理中用的是&lt;strong&gt;灰度&lt;/strong&gt;（Gray scale）来表示图片，但是为了便于理解，下面用的是RGB演示 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2020/04/07/Pmu1irgj8SVFHRd.png&quot; alt=&quot;CORB-RGB.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上图是截取了某一行RGB的值做成的曲线图，可以看到，每条曲线都在不停的上下波动，且波动的频率是相同的。有些区域的波动比较小，有些区域突然出现了大幅波动。&lt;/p&gt;

&lt;p&gt;对比一下图像就能发现，曲线波动较大的地方，也是图像出现突变的地方。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图像的频谱可以理解为将一维的频谱绕着纵轴旋转一圈，形成一个3维的数学函数图（原图中心对称、镜像对称才可以这样干，其他类似），x、y轴代表两个方向的频率，z轴代表该频率的幅值，只不过频谱图像是一个2维图，所以用亮度来表示幅值了。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二维傅里叶变换的物理意义是将图像的灰度分布函数变换为图像的频率分布函数。&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;盲水印的特性&quot;&gt;盲水印的特性&lt;/h4&gt;

&lt;p&gt;鲁棒性一般要能抗（压缩 、裁剪、涂画，旋转）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd1512b85caa.png&quot; alt=&quot;特性&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;隐蔽性&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;由于不希望被察觉、不希望干扰用户体验、不希望被模仿等等原因，我们的水印不可见，也就是隐匿性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;不易移除性&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;不易移除性跟鲁棒性有些相似， 不同的是：&lt;/p&gt;

    &lt;p&gt;鲁棒性更加强调的是数字资源在传播过程中不要被&lt;strong&gt;不自觉&lt;/strong&gt;地干扰和破坏。&lt;/p&gt;

    &lt;p&gt;不易移除性是在别有用心者察觉了盲水印的存在后，不被他们&lt;strong&gt;自觉&lt;/strong&gt;地移除或者破坏。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;强健性&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;强健性通常也被称作鲁棒性，来自于其英文名称（Robustness）的音译。&lt;/p&gt;

    &lt;p&gt;简单地说就是耐操性。&lt;/p&gt;

    &lt;p&gt;需要说明的一点是，鲁棒性和隐蔽性通常不可兼得。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;明确性&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;没什么可说的，就是盲水印需要表示出明确的信息。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;四引申&quot;&gt;四、引申&lt;/h3&gt;

&lt;h4 id=&quot;图种&quot;&gt;图种&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd155d0c9ad4.jpg&quot; alt=&quot;相貌平平&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如这是一张相貌平平的图片, 你可以保存下来,将后缀改为”rar”或者直接用解压工具打开,就可以看到神秘福利.&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;ू･ω･` )&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;制作方法也很简单,在win下 入以下命令就可以做一张”图种”了.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy /b A.jpg + B.zip C.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;大约十年以前，图种被广泛上传到论坛等地用来传播资源。后来由于许多网站在上传图片时会判断图片结尾标识，其之后的全部丢弃，慢慢不再有人使用。(&lt;a href=&quot;https://sm.ms/&quot;&gt;https://sm.ms/&lt;/a&gt;这个图床还是很给力的, 经测试还是可以解析种子)&lt;/p&gt;

&lt;h4 id=&quot;隐藏文件&quot;&gt;隐藏文件&lt;/h4&gt;

&lt;p&gt;图片可以跟种子文件结合，当然也可以和其他文件结合。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd1511028c06.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其实隐藏文件和盲水印都属于&lt;strong&gt;图片隐写术&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;图片隐写术&quot;&gt;图片隐写术&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9A%90%E5%86%99%E6%9C%AF&quot;&gt;隐写术&lt;/a&gt;（Steganography）也是数字水印的一种应用，双方可利用隐藏在数字信号中的信息进行沟通。&lt;/p&gt;

&lt;p&gt;数字照片中的注释数据能记录照片拍摄的时间、使用的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%89%E5%9C%88&quot;&gt;光圈&lt;/a&gt;和&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%96%80&quot;&gt;快门&lt;/a&gt;，甚至是相机的厂牌等信息，这也是数字水印的应用之一。&lt;/p&gt;

&lt;p&gt;某些文件格式可以包含这些称为“metadata”的额外信息。&lt;/p&gt;

&lt;h3 id=&quot;用途&quot;&gt;用途&lt;/h3&gt;

&lt;h4 id=&quot;规避敏感词过滤&quot;&gt;规避敏感词过滤&lt;/h4&gt;

&lt;p&gt;​	所谓的“敏感词过滤”，常翻墙的同学，应该都很熟悉了。用图片来隐藏信息，可以规避GFW的敏感词过滤。&lt;/p&gt;

&lt;h4 id=&quot;规避肉眼审查&quot;&gt;规避肉眼审查&lt;/h4&gt;

&lt;p&gt;​	国内的很多网站，对于上传的图片，都会进行人工审查。如果能通过技术手段把信息隐藏在图片中，而图片本身又看不出什么异样，人工审核就看不出来。&lt;/p&gt;

&lt;h4 id=&quot;传递加密信息&quot;&gt;传递加密信息&lt;/h4&gt;

&lt;p&gt;​	不希望被别人看到的资料、信息等。&lt;/p&gt;

&lt;h3 id=&quot;常见方法&quot;&gt;常见方法&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd1509c7c296.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;原理&quot;&gt;原理&lt;/h3&gt;

&lt;h4 id=&quot;内容覆盖法&quot;&gt;内容覆盖法&lt;/h4&gt;

&lt;p&gt;通常来说，图片文件都有包含2部分：文件头和数据区。&lt;/p&gt;

&lt;p&gt;而“内容覆盖法”，就是把要隐藏的文件，直接【覆盖】到图片文件的【数据区】的【尾部】。&lt;/p&gt;

&lt;p&gt;比方说，某图片有 100KB，其中文件头占 1KB，那么，数据区就是 99KB。也就是说，最多只能隐藏 99KB 的文件。&lt;/p&gt;

&lt;p&gt;切记：&lt;strong&gt;覆盖的时候，千万不可破坏文件头&lt;/strong&gt;。文件头一旦破坏，这个图片文件就不再是一个合法的图片文件了。
　　&lt;/p&gt;

&lt;p&gt;使用这种方法，对图片文件的格式，是有讲究的——最好用【24位色的 BMP 格式】。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;BMP 格式本身比较简单，数据区随便覆盖，问题不大；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;24位色的 BMP 相对其它的格式 BMP，文件尺寸更大，可以隐藏更多内容。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;embed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;代码没有严格计算 BMP 的文件头尺寸，只是大致预留了 1024 字节&quot;&quot;&quot;&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;rb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Not enough space to save &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;__main__&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;embed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Usage:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%s container data output&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;lsb最低有效位&quot;&gt;LSB最低有效位&lt;/h4&gt;

&lt;p&gt;很多商业软件使用的原理都是这个方法。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://segmentfault.com/img/bVbgeGl?w=241&amp;amp;h=216&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如在PNG图片的储存中，每个颜色会有8bit，LSB（&lt;strong&gt;Least Significant Bit&lt;/strong&gt;）隐写就是修改了像数中的最低的1bit，在人眼看来是看不出来区别的，也把信息隐藏起来了。（每个像数可以携带3bit的信息。）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://segmentfault.com/img/bVbgeGw?w=842&amp;amp;h=323&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;譬如我们想把’A’隐藏进来的话，如下图，就可以把A转成16进制的0x61再转成二进制的01100001，再修改为红色通道的最低位为这些二进制串。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://pic3.zhimg.com/80/v2-4946ce476b4c106e0de3265cedaec43e_hd.jpg&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;最后&quot;&gt;最后&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;附上前面演示代码的实现:&lt;/p&gt;

    &lt;p&gt;(参考了几个git hub上的项目,不过鲁棒性都不太好)&lt;/p&gt;

    &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# coding=utf-8
&lt;/span&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cv2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;argparse&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;
   
&lt;span class=&quot;n&quot;&gt;ALPHA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
   
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BlindWaterMark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;盲水印加解密，无频移简单版&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArgumentParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'action'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--origin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ori'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--img'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'img'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--result'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'res'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'--alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALPHA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ori_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fft2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 2维离散傅里叶变换
&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wm_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;wm_height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   
        &lt;span class=&quot;c1&quot;&gt;# 水印随机编码
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 随机数解码时可控
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           
        &lt;span class=&quot;c1&quot;&gt;# 按目标图片大小 对水印图进行对称
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 根据图片形状，生成0填充的矩阵
&lt;/span&gt;   
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_height&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wm_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   
        &lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 原图频域值  +  水印频域值
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ifft2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;# 傅里叶逆变换
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 转换为实数
&lt;/span&gt;   
        &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMWRITE_JPEG_QUALITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
   
   
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ori_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
        &lt;span class=&quot;n&quot;&gt;ori_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fft2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fft&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fft2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
        &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori_f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;
   
        &lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
        &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watermark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   
        &lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cv2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMWRITE_JPEG_QUALITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
   
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parse_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;image %s does not exist.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;watermark %s does not exist.&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;encode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;decode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ori&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   
   
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'__main__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bwm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BlindWaterMark&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bwm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;2.隐写术是一门很深、应用很广泛的学问，这里讲的很泛，权当做抛砖引玉。图片隐写术只是其中一种，有兴趣的同学可以看下面这本书。&lt;/p&gt;

&lt;p&gt;​	&lt;img src=&quot;https://i.loli.net/2019/05/07/5cd1506ce8aac.png&quot; alt=&quot;1551625636929&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 15 Mar 2019 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2019/03/15/%E7%9B%B2%E6%B0%B4%E5%8D%B0%E5%92%8C%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%9C%AF/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2019/03/15/%E7%9B%B2%E6%B0%B4%E5%8D%B0%E5%92%8C%E5%9B%BE%E7%89%87%E9%9A%90%E5%86%99%E6%9C%AF/</guid>
        
        <category>盲水印</category>
        
        <category>隐写术</category>
        
        <category>python</category>
        
        <category>傅里叶变换</category>
        
        
      </item>
    
      <item>
        <title>前端React笔记</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;你说我一个后端工程师，咋前端一写就是好几个月呢
                                                              —— UlyC&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;前端问题记录&quot;&gt;前端问题记录&lt;/h1&gt;
&lt;p&gt;新项目没招前端，没想到全包给我了，踏上前端不归路啊。。。这里是一些碰到的浪费了许多时间的问题记录。&lt;/p&gt;

&lt;h2 id=&quot;1-post请求参数丢失&quot;&gt;1. POST请求参数丢失&lt;/h2&gt;

&lt;h3 id=&quot;描述&quot;&gt;描述&lt;/h3&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;create/createTask&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;task_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;演练&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;task_ips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;eipCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;igw_ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;region_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regionID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;region_short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;regionShortID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;zone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
            &lt;span class=&quot;na&quot;&gt;flow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;clean_flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;autoDestroy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// CPU: CPU,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Mbps: Mbps,&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// storage: storage,&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;simu_ips&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;freeEipCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simu_ips:freeEipCount.toString()&lt;/code&gt;放在最后一行时POST请求发送出现问题，前端可以看到发送的body中含有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simu_ips&lt;/code&gt;字段，但是服务器端无法获取此字段。（抓包也无此字段）&lt;/p&gt;

&lt;h3 id=&quot;解决&quot;&gt;解决&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;simu_ips:freeEipCount.toString()&lt;/code&gt;只要不置于body最后一行，请求都是正确的。原因暂时未知。&lt;/p&gt;

&lt;h2 id=&quot;2chrome-开发者工具观察响应-failed-to-load-response-data&quot;&gt;2.chrome 开发者工具观察响应 Failed to load response data&lt;/h2&gt;

&lt;p&gt;在前端更改 window.location 做跳转，想在 chrome 开发者工具中观察跳转之前发的一个 xhr 请求，勾上了 Preserve log，发现请求是 200 status code，但是 Response 是 Failed to load response data。&lt;/p&gt;

&lt;p&gt;原来是 chrome 的一个 Bug: https://stackoverflow.com/a/38925237&lt;/p&gt;

&lt;p&gt;解决方法也在链接里提到，&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a known issue, that’s been around for a while, and debated a lot. However, there is a workaround, in which you pause on onunload, so you can view the response before it navigates away, and thereby doesn’t lose the data upon navigating away.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;3-表单拆分&quot;&gt;3. 表单拆分&lt;/h1&gt;

&lt;p&gt;React使用表单时，主要遇到的问题是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Field太多导致的卡顿问题&lt;/li&gt;
  &lt;li&gt;拆分Form后所有子表单值的获取&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最初写法是，&lt;/p&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;reurn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Form&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFieldsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())}&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegionSelect&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InstanceConfig&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GateWayConfig&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;cardsList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cardsList&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AutomationConfig&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;form&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Form&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;每个子组件的值状态提升至父组件的Form中，但是这么写耦合性太强，导致性能十分低下。&lt;/p&gt;

&lt;p&gt;后来将每个子组件都拆为各自独立的表单，需要获取数据时，使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getFieldsValue&lt;/code&gt;方法取到，性能提升不少。&lt;/p&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nx&quot;&gt;getAllFieldsValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFieldsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFieldsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFieldsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getFieldsValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RegionSelect&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InstanceConfig&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GateWayConfig&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AutomationConfig&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;formD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;formD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4使用umi的mock数据&quot;&gt;4.使用umi的mock数据&lt;/h2&gt;

&lt;p&gt;若是同一api，请求的动作不同，得不到后面的数据，状如：&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;'POST&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/drill/task/hosts':&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;status:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'GET&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/drill/task/hosts':&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;ID&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;CreatedAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2018-12-14T01:55:40+08:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;UpdatedAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2019-01-02T20:04:49+08:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;DeletedAt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;Task_id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;226600110560135937&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,}]}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;```，&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;调了一晚上。。发现是umi  mock数据的坑，最后用第三方mock调试是正确的。&lt;/p&gt;

&lt;h2 id=&quot;5dva-loading用法&quot;&gt;5.dva-loading用法&lt;/h2&gt;

&lt;p&gt;dva-loading是dvajs的一个插件，封装了对loading状态的处理。它提供了对当前异步加载方法的状态（异步加载中状态为 true，异步加载完成状态为 false）的监听和追踪, 可以用来设定ant design中的组件的loading属性。&lt;/p&gt;

&lt;h3 id=&quot;用法&quot;&gt;用法&lt;/h3&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//index.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dva&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;dva&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createLoading&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;dva-loading&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dva&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;




&lt;span class=&quot;c1&quot;&gt;// yourfile.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
           		 &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Table&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;	
}	

function mapStateToProps(state) &lt;span class=&quot;si&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;c1&quot;&gt;//dva-loading 有effects， models，global三个方法&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;isLoading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;effects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;Name[namespace]/Name[*effect]&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// 意为 根据namespace中的某个动作来决定isLoading状态&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 或者 isLoading: state.loading.models.Name[filename],&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//意为 根据models的某个文件 来决定isLoading状态&lt;/span&gt;
       &lt;span class=&quot;c1&quot;&gt;// 或者  isLoading: state.loading.global  &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//当所有异步请求都响应才做下一步操作，该方法监听所有异步请求的状态。&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;6-dva路由监听&quot;&gt;6. dva路由监听&lt;/h2&gt;

&lt;p&gt;在dva中我们可以在Modal中实现事件监听，通过在modal中添加一个 subscriptions,并且在里面创建一个setup函数&lt;/p&gt;

&lt;div class=&quot;language-react highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;infoArea&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  	 &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;effects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
 
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;reducers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个set函数只接受两个参数，一个是dispatch一个是history.&lt;/p&gt;

&lt;p&gt;监听时经常需要动态匹配路由，这时我们需要 &lt;strong&gt;path-to-regexp&lt;/strong&gt;这个包,可以自己npm install一下。&lt;/p&gt;

&lt;p&gt;这个包的一般用法就是像这样&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &lt;span class=&quot;nx&quot;&gt;subscriptions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// 监听 history 变化，当进入 `/info/A|B` 时触发 `queryOverview` action&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pathToRegexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/info/:name&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//match是一个数组，match[0]为匹配到所有的东西，match[1]才是需要的精确匹配数据&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;queryOverview&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                        &lt;span class=&quot;na&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;更详细的用法见&lt;/p&gt;

</description>
        <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2019/01/28/%E5%89%8D%E7%AB%AFReact%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2019/01/28/%E5%89%8D%E7%AB%AFReact%E7%AC%94%E8%AE%B0/</guid>
        
        <category>React</category>
        
        <category>前端</category>
        
        <category>umi</category>
        
        <category>dva</category>
        
        
      </item>
    
      <item>
        <title>win10配合Ubuntu子系统打造舒适Python开发环境</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;小明因为老婆没有工作，一家人生活得挺困难&lt;/p&gt;

 																—— 顾前 
&lt;/blockquote&gt;

&lt;h1 id=&quot;win10配合ubuntu子系统打造舒适python开发环境&quot;&gt;win10配合Ubuntu子系统打造舒适Python开发环境&lt;/h1&gt;

&lt;h2 id=&quot;ubuntu-子系统wsl&quot;&gt;Ubuntu 子系统（WSL）&lt;/h2&gt;

&lt;p&gt;微软从 Windows 10 开始推出了 Linux 子系统（Windows Subsystem for Linux, WSL）的功能，起初只有 Ubuntu 子系统，现在逐渐推出了多个发行版（包括 Ubuntu，openSUSE，SUSE Linux Enterprise Server 12），主要给开发者使用，可以在 Windows 平台提供 Linux 的开发能力，类似于虚拟机，但是底层实现是直接重写系统调用，因此性能更好。&lt;/p&gt;

&lt;p&gt;【注意】Linux子系统有一点要注意, 那就是Windows主系统中的文件能够在Linux子系统中可见, 而Linux子系统中的文件在Windows主系统中不可见. 举个栗子, 比如我在Windows主系统的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Demo\Project\src&lt;/code&gt;目录中的源代码文件, 可以对其使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dotnet publish&lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull / push&lt;/code&gt;(前提是安装Win版的DotNet Core和Git), 然后我在Linux子系统中就可以在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/mnt/c/Demo/Project/src&lt;/code&gt;这个路径下找到这些文件, 并且也可以执行同样的命令(前提是安装Linux版的DotNet Core和Git). 也就是只要在相应的系统中安装了对应的程序包, 就可以执行对应的操作或命令, 只不过需要你能访问到命令执行的对象文件, 但是你在Linux子系统的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/Demo/Project/src&lt;/code&gt;目录下存放的源代码文件, 在Windows主系统中访问不到, 这就没办法了. 因此我一般都是把开发工作放在Windows系统中, 而把部署运行工作放在Linux子系统下.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://padeoe.com/wp-content/uploads/2018/02/wsl_microsoft_store.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;启用-ubuntu-子系统&quot;&gt;启用 Ubuntu 子系统&lt;/h2&gt;

&lt;p&gt;Windows 10 默认没有开启 Linux 子系统，可以根据微软官方的&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/install-win10&quot;&gt;Linux子系统安装指引&lt;/a&gt;来开启。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;开启后如何打开 Linux 子系统？&lt;/strong&gt;
在 cmd 或者 powershell 中执行 bash 即可。这里推荐一款win下美观好用的终端&lt;a href=&quot;https://hyper.is/&quot;&gt;hyper&lt;/a&gt;，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/13041/16820268/13c9bfe6-4905-11e6-8fe4-baf8fc8d9293.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;pycharm使用wsl中的解释器运行程序&quot;&gt;Pycharm使用WSL中的解释器运行程序&lt;/h2&gt;

&lt;p&gt;目前中文互联网上能查的方法都比较老了，他们的基本思路都是在WSL中开启SSLserver，然后使用Pycharm中的SSL连接。&lt;/p&gt;

&lt;p&gt;不过今年JetBrain发行了PyCharm 2018.3 (Professional Edition)，在此版本中最大的特色就是增加了解释器可以直接选择WSL中的解释器，&lt;img src=&quot;![img](https://www.jetbrains.com/pycharm/whatsnew/img/2018.3/WSL-Web.png)&quot; alt=&quot;&quot; /&gt;。&lt;/p&gt;

&lt;p&gt;有了这一功能之后就不用麻烦地设置WSL的SSH了，详细教程见&lt;a href=&quot;https://www.jetbrains.com/help/pycharm/2018.3/using-wsl-as-a-remote-interpreter.html&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;第一步： 解释器选择面板中点添加。 &lt;img src=&quot;https://www.jetbrains.com/help/img/idea/2018.3/py_interpreter_add.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第二步： 选择WSL&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.jetbrains.com/help/img/idea/2018.3/py_wsl_interpreter.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;第三步： &lt;img src=&quot;https://www.jetbrains.com/help/img/idea/2018.3/py_wsl_interpreter_created.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这样解释器就添加完成， &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/faq#how-do-i-use-a-windows-file-with-a-linux-app&quot;&gt;mnt mappings&lt;/a&gt; 也自动设置好了。&lt;/p&gt;

&lt;h4 id=&quot;注意&quot;&gt;注意&lt;/h4&gt;

&lt;p&gt;需要特别注意的是，在WSL中如果创建了虚拟环境在Pycharm中是识别不出的，它只会识别WSL系统默认的python解释器。&lt;/p&gt;

&lt;h2 id=&quot;其他&quot;&gt;其他&lt;/h2&gt;

&lt;h4 id=&quot;ubuntu相关设置&quot;&gt;Ubuntu相关设置&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/42514711&quot;&gt;个人wsl的设置 - 洛克的文章 - 知乎&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;pycharm20183以前版本的设置方法&quot;&gt;pycharm2018.3以前版本的设置方法&lt;/h4&gt;

&lt;p&gt;可以参照这篇文章，算是比较新而且可行的。&lt;a href=&quot;https://padeoe.com/use-pytorch-in-windows-subsystem-for-linux/&quot;&gt;在windows 10的Ubuntu子系统使用Pytorch&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 16 Dec 2018 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2018/12/16/win10%E4%BD%BF%E7%94%A8pyhcarm%E9%85%8D%E5%90%88WSL%E5%BC%80%E5%8F%91python/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2018/12/16/win10%E4%BD%BF%E7%94%A8pyhcarm%E9%85%8D%E5%90%88WSL%E5%BC%80%E5%8F%91python/</guid>
        
        <category>WSL</category>
        
        <category>windows开发</category>
        
        <category>linux</category>
        
        <category>开发环境</category>
        
        <category>python</category>
        
        <category>ubuntu</category>
        
        <category>pycharm</category>
        
        
      </item>
    
      <item>
        <title>元类和元编程</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;元类就是深度的魔法，99%的⽤户应该根本不必为此操⼼。&lt;/p&gt;

  &lt;p&gt;如果你想搞清楚 究竟是否需要⽤到元类，那么你就不需要它。&lt;/p&gt;

  &lt;p&gt;那些实际⽤到元类的⼈都⾮常 清楚地知道他们需要做什么，⽽且根本不需要解释为什么要⽤元类。&lt;/p&gt;

 																—— TimPeters &lt;br /&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;元类和元编程&quot;&gt;元类和元编程&lt;/h1&gt;

&lt;h2 id=&quot;一元类&quot;&gt;一、元类&lt;/h2&gt;

&lt;h3 id=&quot;概念&quot;&gt;概念&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;元类（&lt;em&gt;metaclass&lt;/em&gt; ）&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，就是创建类的类。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这么说可能不太好理解，下面我们来解释下上面这句话：&lt;/p&gt;

&lt;p&gt;在⼤多数编程语⾔中，类就是⼀组⽤来描述如何⽣成⼀个对象的代码段，在python中也不例外。&lt;/p&gt;

&lt;p&gt;实例对象是由类生成的，而python中，类本身也是可以被传递和自省的对象。&lt;/p&gt;

&lt;p&gt;类对象是用什么创建和生成的呢？答案是元类，元类就是一种知道如何创建和管理类的对象，也可以叫做类生成器。&lt;/p&gt;

&lt;h3 id=&quot;__-class-__-和type&quot;&gt;__ class __ 和type&lt;/h3&gt;

&lt;p&gt;知道了元类的概念，那么我们怎么查看python中的元类具体是什么东西呢？&lt;/p&gt;

&lt;p&gt;python中对象有个魔法属性&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__class__&lt;/code&gt;,可以查看对象是由哪个类创建出来的：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Jun&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2018&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;08&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1912&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AMD64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;abc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# 字符串“abc”是由“str”类实例化出来的
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 没错，int、str等数据类型也是一个个的类，
# 具体的字符串和数字其实是他们实例化对象。
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Demo&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; Demo.__class__
&amp;lt;class '&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可以看到类对象的类，就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;这个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;其实就是平时我们用来查看数据类型的内建函数：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Demo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在只使用这个功能时，作用与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__class__&lt;/code&gt;相同。&lt;/p&gt;

&lt;p&gt;而其实&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;就是一个元类，它还有⼀种完全不同的功能：动态的创建类。&lt;sup id=&quot;fnref:2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;语法为：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type(类名, 由⽗类名称组成的元组（针对继承的情况，可以为空）， 包含属性的字典)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Demo2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),{})&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Demo2&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Demo2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;demo2&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Demo2&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x000001F71DBE5EF0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由type动态创建的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Demo2&lt;/code&gt;类对象，和由&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;“class ...”&lt;/code&gt;创建的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Demo&lt;/code&gt;，两者完全等价。&lt;/p&gt;

&lt;p&gt;python 3以后&lt;sup id=&quot;fnref:3&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;，默认的元类皆为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;，即所有的类对象默认都是由&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;创建的，接下来让我们来自定义一个元类。&lt;/p&gt;

&lt;h3 id=&quot;创建一个元类&quot;&gt;创建一个元类&lt;/h3&gt;

&lt;p&gt;最简单的，自定义一个继承自type的子类，想要使用它创建类对象时在类中使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__metaclass__&lt;/code&gt;声明一下：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;__metaclass__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# python2
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# python3
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一般来说，定义的元类应该重新实现&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__()&lt;/code&gt;与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__()&lt;/code&gt;方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果需要修改类的属性，使用元类的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__&lt;/code&gt;方法&lt;/li&gt;
  &lt;li&gt;如果只是做一些类属性检查的工作，使用元类的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__&lt;/code&gt;方法。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 注意第一个参数是cls而不是self
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'create class %s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Init class %s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;         &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 注意__init__方法禁止返回值
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Init&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;__main__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;metaclass拓展&quot;&gt;metaclass拓展&lt;/h4&gt;

&lt;p&gt;事实上，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__metaclass__&lt;/code&gt;实际上可以被任意调⽤，它只是规定了类“按照什么样的规则去生成”，并不需要是⼀个正式 的类。&lt;/p&gt;

&lt;p&gt;比如，我们有一个比较二的需求：你决定在你的模块⾥，所有的类的属性都应该是⼤写形式。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;upper_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future_class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future_class_parents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future_class_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;		&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;遍历属性字典，把不是__开头的属性名字变为⼤写&quot;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;newAttr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future_class_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;__&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;                     &lt;span class=&quot;n&quot;&gt;newAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future_class_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future_class_parents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newAttr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upper_attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bip'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'Foo'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;has&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;no&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bar'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BAR&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;'bip'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;元类冲突&quot;&gt;元类冲突&lt;/h3&gt;

&lt;p&gt;假如有两个不同的元类，要生成一个继承这两个类的子类，会产生什么情况呢？&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetaA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetaB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MetaA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MetaB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;TypeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conflict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;derived&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;must&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;non&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subclass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclasses&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;its&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时会报错， 元类冲突。&lt;/p&gt;

&lt;p&gt;我们需要手动构造新的子类元类，让新的子类元类继承自A和B的元类：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MetaC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MetaA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MetaB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MetaC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样就不会报错了。&lt;/p&gt;

&lt;h2 id=&quot;二元类的应用&quot;&gt;二、元类的应用&lt;/h2&gt;

&lt;p&gt;应用元类之前我们首先要知道使用元类编程的缺点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;实现麻烦&lt;/li&gt;
  &lt;li&gt;代码可读性不高&lt;/li&gt;
  &lt;li&gt;不易维护&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其实在开头引用TimPeters的话就说明，不要随意在生产代码中使用元类，而且现有的编码规范也极不推荐使用。&lt;/p&gt;

&lt;p&gt;好吧，了解元类的使用对你更深入理解一些框架是有帮助的，如果你执意要学习这门禁术，那就往下看吧！&lt;/p&gt;

&lt;p&gt;===========================禁术分割线 =======================&lt;/p&gt;

&lt;p&gt;就元类本身而言，它的作用是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拦截类的创建&lt;/li&gt;
  &lt;li&gt;修改类&lt;/li&gt;
  &lt;li&gt;返回修改之后的类&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;使用元类还是有一些好处的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;意图更加明确。当然你的metaclass名字要起好&lt;/li&gt;
  &lt;li&gt;面向对象。可以隐式继承到子类&lt;/li&gt;
  &lt;li&gt;可以更好地组织代码&lt;/li&gt;
  &lt;li&gt;可以用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__new__&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__init__,__call__&lt;/code&gt;等方法更好地控制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里先简单说几个简单的应用实例：&lt;/p&gt;

&lt;h3 id=&quot;实现单例模式&quot;&gt;实现单例模式&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
		&lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;通过重写__call__拦截实例的创建,(实例通过调用括号运算符创建的)&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;面向切面aop编程&quot;&gt;面向切面（AOP）编程&lt;/h3&gt;

&lt;p&gt;在运行时，动态地将代码切入到类的指定方法、指定位置上的编程称为面向切面的编程(AOP)。&lt;/p&gt;

&lt;p&gt;简单地说，如果不同的类要实现相同的功能，可以将其中相同的代码提取到一个切片中，等到需要时再切入到对象中去。这些相同的代码片段称为切面，而切入到哪些类、哪些方法则叫切入点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;【注意】&lt;/strong&gt;：python的装饰器天然适合AOP，简单易读又好用。使用元类AOP纯属自找麻烦，这里主要是说下原理，并不是让大家去用。（在生产代码中炫技很讨厌的说(′゜c_，゜` ) ）&lt;/p&gt;

&lt;p&gt;面向切面比较常用的是为类方法添加记录日志功能，下面使用元类来实现此功能：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callfunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;（&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'debug_log.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;）&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;           
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Calling %s: %s ,%s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'%s returned %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;callfunc&lt;/span&gt;
 
 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogMeta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;types&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunctionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;# 如果v是函数类型, 使用trace处理，添加日志
&lt;/span&gt;                &lt;span class=&quot;n&quot;&gt;attr_dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attr_dct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LogMeta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;spam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;对抽象基类的支持&quot;&gt;对抽象基类的支持&lt;/h3&gt;

&lt;p&gt;简单的说，抽象基类就是包含一个或者多个抽象方法的类。&lt;/p&gt;

&lt;p&gt;它本身不实现抽象方法，强制子类去实现，同时抽象基类自己不能被实例化，没有实现抽象方法的子类也无法实例化。&lt;/p&gt;

&lt;p&gt;python内置的abc(abstract base class)来实现抽象基类。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABCMeta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abstractmethod&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABCMeta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用这种方式如果没有在子类里实现foo方法你是没有办法实例化抽象基类Base的子类的 。&lt;/p&gt;

&lt;p&gt;另外应该优先使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collections&lt;/code&gt;定义的抽象基类，比如要实现一个容器我们可以继承 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;collections.Container&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;实现orm&quot;&gt;实现ORM&lt;/h3&gt;

&lt;p&gt;这个比较复杂，在下一章再详细说。&lt;/p&gt;

&lt;h2 id=&quot;三元编程&quot;&gt;三、元编程&lt;/h2&gt;

&lt;h3 id=&quot;概念-1&quot;&gt;概念&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;元编程&lt;/strong&gt;（英语：Metaprogramming），又译&lt;strong&gt;超编程&lt;/strong&gt;，是指某类&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F&quot;&gt;计算机程序&lt;/a&gt;的编写，这类计算机程序编写或者操纵其它程序（或者自身）作为它们的数据，或者在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%BF%90%E8%A1%8C%E6%97%B6&quot;&gt;运行时&lt;/a&gt;完成部分本应在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%BC%96%E8%AF%91%E6%97%B6&quot;&gt;编译时&lt;/a&gt;完成的工作。多数情况下，与手工编写全部代码相比，程序员可以获得更高的工作效率，或者给与程序更大的灵活度去处理新的情形而无需重新编译。&lt;/p&gt;

  &lt;p&gt;编写元程序的语言称之为&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%83%E8%AA%9E%E8%A8%80&quot;&gt;元语言&lt;/a&gt;。被操纵的程序的语言称之为“&lt;a href=&quot;https://zh.wikipedia.org/w/index.php?title=%E7%9B%AE%E6%A0%87%E8%AF%AD%E8%A8%80&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;目标语言&lt;/a&gt;”。一门编程语言同时也是自身的元语言的能力称之为“&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)&quot;&gt;反射&lt;/a&gt;”或者“自反”。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;以上引自维基百科，&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%83%E7%BC%96%E7%A8%8B&quot;&gt;元编程&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;许多人将「元类编程」和「元编程」混为一谈，甚至说“元编程 == 元类编程”，这是非常不对的。&lt;/p&gt;

&lt;p&gt;就比如python，使用Cpython解释器时，C语言就是元语言，python就是目标语言，C语言对python进行了元编程。&lt;/p&gt;

&lt;p&gt;元编程在不同的语言中有不同的实现，在Python中，元编程实现通常有这几个手段：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;魔法方法&lt;/li&gt;
  &lt;li&gt;描述器（descriptor）&lt;/li&gt;
  &lt;li&gt;元类&lt;/li&gt;
  &lt;li&gt;eval函数&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;应用&quot;&gt;应用&lt;/h3&gt;

&lt;p&gt;元编程常见的应用场景很多，扩展（重构）语法、开发DSL、生成代码、根据特定场景自动选择代码优化、解决一些正交的架构设计问题、AOP等等。&lt;/p&gt;

&lt;p&gt;所以元编程存在的目的，就是多提供了一个抽象层次。&lt;/p&gt;

&lt;p&gt;至于元编程有什么缺点，争议还是比较大的。比如以重构语法的应用为例，很多元编程的反对者就认为这样会导致代码的可读性、可维护性降低，分化社区，影响交流，因为每个开发人员都能搞一个自己的方言 。&lt;/p&gt;

&lt;p&gt;对于作为”胶水语言”的python，对各种其他语言库的支持（ctypes、js2py等），更是元编程应用很好的实例。&lt;/p&gt;

&lt;p&gt;很经典的一个应用就是使用元类在python语言和数据库中间增加一个抽象层：ORM层。&lt;/p&gt;

&lt;h3 id=&quot;orm的简单实现&quot;&gt;ORM的简单实现&lt;/h3&gt;

&lt;h4 id=&quot;orm&quot;&gt;ORM&lt;/h4&gt;

&lt;p&gt;ORM全称“Object Relational Mapping”，即对象-关系映射，就是把关系数据库的一行映射为一个对象，也就是一个类对应一个表，这样，写代码更简单，不用直接操作SQL语句。&lt;/p&gt;

&lt;p&gt;以下代码参考自文章&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386820064557c69858840b4c48d2b8411bc2ea9099ba000&quot;&gt;使用元类-—廖雪峰的官方网站&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;编写底层模块的第一步，就是先把调用接口写出来。比如，使用者如果使用这个ORM框架，想定义一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;类来操作对应的数据库表&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;User&lt;/code&gt;，我们期待他写出这样的代码：&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 定义类的属性到列的映射：
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# 创建一个实例：
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12345&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Michael'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'test@orm.org'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'my-pwd'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 保存到数据库：
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中，父类&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Model&lt;/code&gt;和属性类型&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;StringField&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IntegerField&lt;/code&gt;是由ORM框架提供的，剩下的魔术方法比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;save()&lt;/code&gt;全部由metaclass自动完成。虽然metaclass的编写会比较复杂，但ORM的使用者用起来却异常简单。&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;负责保存数据库表的字段名和字段类型&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;column_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column_type&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&amp;lt;%s:%s&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StringField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'varchar(100)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#python2中super里要带参数
&lt;/span&gt;        
        
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'bigint'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModelMetaclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;自定义元类&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Model'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Found model: %s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# 排除掉对Model类的修改
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Found mapping: %s ==&amp;gt; %s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;
        
        &lt;span class=&quot;c1&quot;&gt;# 从类属性中删除该Field属性，否则，实例的属性会遮盖类的同名属性，运行错误    
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
        
        &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__mappings__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappings&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# 保存属性和列的映射关系
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__table__'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# 假设表名和类名一致（简化）
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bases&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metaclass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ModelMetaclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;只简单实现了INSERT功能&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__getattr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;AttributeError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sa&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;'Model' object has no attribute '%s'&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__setattr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;  
        
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__mappings__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'?'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        
        &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'insert into %s (%s) values (%s)'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__table__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fields&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;','&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'SQL: %s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sql&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ARGS: %s'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样，就实现了一个简单的ORM框架。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;本来想在这里一起把抽象基类（abc）和面向切面编程（AOP）的几种实现一起谈谈，结果篇幅又是远超我的想象，还是以后有机会慢慢写吧….&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接&lt;/h2&gt;

&lt;p&gt;[1].&lt;a href=&quot;https://www.ibm.com/developerworks/cn/linux/l-pymeta/index.html&quot;&gt;Python 中的元类编程&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2]. &lt;a href=&quot;https://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001386820064557c69858840b4c48d2b8411bc2ea9099ba000&quot;&gt;使用元类-—廖雪峰的官方网站&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3].&lt;a href=&quot;https://www.zhihu.com/question/23856985/answer/25965835&quot;&gt;怎么理解元编程？ - 知乎用户的回答 - 知乎 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[4].&lt;a href=&quot;https://www.cnblogs.com/linxiyue/p/8030604.html&quot;&gt;元类与面向切面编程——再见紫罗兰的博客&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[5].&lt;a href=&quot;https://zhuanlan.zhihu.com/p/28333506&quot;&gt;『简单的』Python 元类 - Pegasus Wang的文章 - 知乎 &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[6]. &lt;a href=&quot;https://stackoverflow.com/questions/100003/what-are-metaclasses-in-python&quot;&gt;What are metaclasses in Python?——StackOverflow&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[7]. &lt;a href=&quot;https://blog.csdn.net/VCCTor/article/details/50636882&quot;&gt;Python元编程-被遗忘的远古凶兽&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Meta- 这个前缀在希腊语中的本意是「在…后，越过…的」，类似于拉丁语的 post-，比如 metaphysics 就是「在物理学之后」（形而上学），这个词最开始指一些亚里士多德的著作，因为它们通常排序在《物理学》之后。            但西方哲学界在几千年中渐渐赋予该词缀一种全新的意义：关于某事自身的某事。比如 meta-knowledge 就是「关于知识本身的知识」，meta-data 就是「关于数据的数据」，meta-language 就是「关于语言的语言」，类似的，metaclass就是「关于类的类」。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;在python 2中，默认的元类是types.ClassType，就是所谓的旧样式类。python2.2以后已不提倡使用。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;既然type也是一种“类”，为什么不写成“Type”呢？ 想想“str”、“int”等“类”，这里应该是为了和他们保持一致。 &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2018/10/16/python%E4%B8%AD%E7%9A%84%E5%85%83%E7%B1%BB%E5%92%8C%E5%85%83%E7%BC%96%E7%A8%8B/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2018/10/16/python%E4%B8%AD%E7%9A%84%E5%85%83%E7%B1%BB%E5%92%8C%E5%85%83%E7%BC%96%E7%A8%8B/</guid>
        
        <category>元类</category>
        
        <category>python黑魔法</category>
        
        <category>元编程</category>
        
        <category>面向切面</category>
        
        <category>抽象基类</category>
        
        <category>描述器</category>
        
        <category>面向切面</category>
        
        
      </item>
    
      <item>
        <title>没那么浅地谈谈HTTP与HTTPS【三】</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;未济，亨。小狐汔济，濡其尾，无攸利。——《易》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;六密钥管理&quot;&gt;六、密钥管理&lt;/h2&gt;

&lt;p&gt;当不再担心身份会被冒充、篡改之后，我们再来详细谈谈网络通信中对于加密算法的密钥管理。&lt;/p&gt;

&lt;p&gt;在密钥被签发后，密钥管理一般有三个步骤：&lt;strong&gt;交换&lt;/strong&gt;、&lt;strong&gt;存储&lt;/strong&gt;和&lt;strong&gt;使用&lt;/strong&gt;。其中最重要也是最难的点在于&lt;strong&gt;密钥交换&lt;/strong&gt;。&lt;/p&gt;

&lt;h3 id=&quot;密钥交换&quot;&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2&quot;&gt;密钥交换&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;进行安全通信之前，各用户间需要确立加密程序的细节，尤其是密钥。在对称密钥加密系统，各用户间需要确立共同使用的单一密钥，此步骤即密钥交换。&lt;/p&gt;

&lt;p&gt;前面章节已经提过，交换对称密钥必须透过另一安全的通信管道进行；否则，如果以明文形式在网络发送，将使窃听者能够立即得知密钥以及据其加密的数据。以前，交换密称密钥是非常麻烦的，可能需要使&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%A4%96%E4%BA%A4%E9%82%AE%E8%A2%8B&quot;&gt;外交邮袋&lt;/a&gt;等安全渠道。&lt;/p&gt;

&lt;p&gt;公开密钥加密的出现大大减轻了交换对称密钥的困难，公钥可以公开（透过不安全、可被窃听的渠道）发送，用以加密明文。不过，公钥加密在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E8%A4%87%E9%9B%9C%E6%80%A7%E7%90%86%E8%AB%96&quot;&gt;在计算上相当复杂&lt;/a&gt;，性能欠佳、远远不比对称加密。&lt;/p&gt;

&lt;p&gt;因此，在一般实际情况下，往往通过公钥加密来&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%89%E5%85%A8%E4%BC%AA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90%E5%99%A8&quot;&gt;随机&lt;/a&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B&quot;&gt;创建临时的对称秘钥&lt;/a&gt;，亦即&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B0%8D%E8%A9%B1%E9%8D%B5&quot;&gt;对话键&lt;/a&gt;，然后才通过对称加密来传输大量、主体的数据。（也叫混合加密算法）&lt;/p&gt;

&lt;h4 id=&quot;密钥交换协商机制的几种类型&quot;&gt;密钥交换/协商机制的几种类型&lt;/h4&gt;

&lt;h5 id=&quot;1依靠非对称加密算法&quot;&gt;1.&lt;strong&gt;依靠非对称加密算法&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原理：&lt;/p&gt;

    &lt;p&gt;拿到公钥的一方先生成随机的会话密钥，然后利用公钥加密它；再把加密结果发给对方，对方用私钥解密；于是双方都得到了会话密钥。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;举例：&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/RSA_(cryptosystem)&quot;&gt;RSA&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;2-依靠专门的密钥交换算法&quot;&gt;2. &lt;strong&gt;依靠专门的密钥交换算法&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原理：&lt;/p&gt;

    &lt;p&gt;这个原理比较复杂，一两句话说不清楚，待会儿聊到 DH 的那个章节会详谈。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;举例：&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange&quot;&gt;DH 算法&lt;/a&gt;及其变种（&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%A9%A2%E5%9C%93%E6%9B%B2%E7%B7%9A%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E9%87%91%E9%91%B0%E4%BA%A4%E6%8F%9B&quot;&gt;ECDH算法&lt;/a&gt;）&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;3-依靠通讯双方事先已经共享的秘密&quot;&gt;3. &lt;strong&gt;依靠通讯双方事先已经共享的“秘密”&lt;/strong&gt;&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;原理：&lt;/p&gt;

    &lt;p&gt;既然双方已经有共享的秘密（这个“秘密”可能已经是一个密钥，也可能只是某个密码/password），只需要根据某种生成算法，就可以让双方产生相同的密钥（并且密钥长度可以任意指定）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;举例：&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Pre-shared_key&quot;&gt;PSK&lt;/a&gt; 和 &lt;a href=&quot;https://en.wikipedia.org/wiki/Secure_Remote_Password_protocol&quot;&gt;SRP&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;基于-rsa-的密钥协商&quot;&gt;基于 RSA 的密钥协商&lt;/h4&gt;

&lt;h5 id=&quot;概述&quot;&gt;概述&lt;/h5&gt;

&lt;p&gt;这大概是 SSL 最古老的密钥协商方式——早期的 SSLv2 只支持一种密钥协商机制，就是它。&lt;a href=&quot;https://ulyc.github.io/2018/09/21/%E6%B2%A1%E9%82%A3%E4%B9%88%E6%B5%85%E5%9C%B0%E8%B0%88%E8%B0%88HTTP%E4%B8%8EHTTPS-%E4%BA%8C/&quot;&gt;（前一篇）&lt;/a&gt;介绍身份认证重要性的时候，也是拿 RSA 来演示。&lt;/p&gt;

&lt;p&gt;RSA 是一种【非】对称加密算法。特点是：加密和解密用使用【不同的】密钥。&lt;/p&gt;

&lt;p&gt;并且“非对称加密算法”既可以用来做“加密/解密”，还可以用来做“数字签名”。&lt;/p&gt;

&lt;h5 id=&quot;密钥协商的步骤&quot;&gt;密钥协商的步骤&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;客户端连上服务端&lt;/li&gt;
    &lt;li&gt;服务端发送 CA 证书给客户端&lt;/li&gt;
    &lt;li&gt;客户端验证该证书的可靠性&lt;/li&gt;
    &lt;li&gt;客户端从 CA 证书中取出公钥&lt;/li&gt;
    &lt;li&gt;客户端生成一个随机密钥 k，并用这个公钥加密得到 k’&lt;/li&gt;
    &lt;li&gt;客户端把 k’ 发送给服务端&lt;/li&gt;
    &lt;li&gt;服务端收到 k’ 后用自己的私钥解密得到 k&lt;/li&gt;
    &lt;li&gt;此时双方都得到了密钥 k，协商完成&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;如何防范偷窥嗅探&quot;&gt;如何防范偷窥（嗅探）&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;攻击方式1&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;攻击者虽然可以监视网络流量并拿到公钥，但是【无法】通过公钥推算出私钥（这点由 RSA 算法保证）&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;攻击方式2&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;攻击者虽然可以监视网络流量并拿到 k’，但是攻击者没有私钥，【无法解密】 k’，因此也就无法得到 k&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;如何防范篡改假冒身份&quot;&gt;如何防范篡改（假冒身份）&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;攻击方式1&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;如果攻击者在第2步篡改数据，伪造了证书，那么客户端在第3步会发现（这点由证书体系保证）&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;攻击方式2&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;如果攻击者在第6步篡改数据，伪造了k’，那么服务端收到假的k’之后，解密会失败（这点由 RSA 算法保证）。服务端就知道被攻击了。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;基于-dh-的密钥协商&quot;&gt;基于 DH 的密钥协商&lt;/h4&gt;

&lt;h5 id=&quot;概述-1&quot;&gt;概述&lt;/h5&gt;

&lt;p&gt;DH 算法又称“Diffie–Hellman 算法”。这是两位数学牛人的名称，他们创立了这个算法。该算法用来实现【安全的】“密钥交换”。它可以做到——“通讯双方在完全没有对方任何预先信息的条件下通过不安全信道创建起一个密钥”。这句话比较绕口，通俗地说，可以归结为两个优点：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;通讯双方事先【不】需要有共享的秘密。&lt;/li&gt;
    &lt;li&gt;用该算法协商密码，即使协商过程中被别人全程偷窥（比如“网络嗅探”），偷窥者也【无法】知道协商得出的密钥是啥。&lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;

&lt;p&gt;但是 DH 算法本身也有缺点——它不支持认证。&lt;/p&gt;

&lt;p&gt;也就是说：它虽然可以对抗“&lt;strong&gt;偷窥&lt;/strong&gt;”，却无法对抗“&lt;strong&gt;篡改&lt;/strong&gt;”，自然也就无法对抗“中间人攻击/MITM”（前一篇已经强调过——缺乏身份认证，【必定会】遭到“中间人攻击/MITM”）。&lt;/p&gt;

&lt;p&gt;为了避免遭遇 MITM 攻击，DH 需要与其它签名算法（比如 RSA、DSA、ECDSA）配合——靠签名算法帮忙来进行身份认证。当 DH 与 RSA 配合使用，称之为“DH-RSA”，与 DSA 配合则称为“DH-DSA”，以此类推。&lt;/p&gt;

&lt;p&gt;反之，如果 DH 【没有】配合某种签名算法，则称为“DH-ANON”（ANON 是“anonymous”（匿名）的简写）。此时会遭遇“中间人攻击/MITM”。&lt;/p&gt;

&lt;p&gt;关于该算法具体数学原理，可以参见&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B&quot;&gt;迪菲-赫尔曼密钥交换&lt;/a&gt;。&lt;/p&gt;

&lt;h5 id=&quot;密钥协商的步骤-1&quot;&gt;密钥协商的步骤&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;客户端先连上服务端&lt;/li&gt;
    &lt;li&gt;服务端生成一个随机数 s 作为自己的私钥，然后根据算法参数计算出公钥 S（算法参数通常是固定的）&lt;/li&gt;
    &lt;li&gt;服务端使用某种签名算法把“算法参数（模数p，基数g）和服务端公钥S”作为一个整体进行签名&lt;/li&gt;
    &lt;li&gt;服务端把“算法参数（模数p，基数g）、服务端公钥S、签名”发送给客户端&lt;/li&gt;
    &lt;li&gt;客户端收到后验证签名是否有效&lt;/li&gt;
    &lt;li&gt;客户端生成一个随机数 c 作为自己的私钥，然后根据算法参数计算出公钥 C&lt;/li&gt;
    &lt;li&gt;客户端把 C 发送给服务端&lt;/li&gt;
    &lt;li&gt;客户端和服务端（根据上述 DH 算法）各自计算出 k 作为会话密钥&lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;

&lt;h5 id=&quot;如何防范偷窥嗅探-1&quot;&gt;如何防范偷窥（嗅探）&lt;/h5&gt;

&lt;p&gt;嗅探者可以通过监视网络传输，得到算法参数（模数p，基数g）以及双方的公钥，但是【无法】推算出双方的私钥，也【无法】推算出会话密钥（这是由 DH 算法在数学上保证的）&lt;/p&gt;

&lt;h5 id=&quot;如何防范篡改假冒身份-1&quot;&gt;如何防范篡改（假冒身份）&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;攻击方式1&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;攻击者可以第4步篡改数据（修改算法参数或服务端公钥）。但因为这些信息已经进行过数字签名。篡改之后会被客户端发现。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;攻击方式2&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;攻击者可以在第7步篡改客户端公钥。这步没有签名，服务端收到数据后不会发现被篡改。但是，攻击者篡改之后会导致“服务端与客户端生成的会话密钥【不一致】”。在后续的通讯步骤中会发现这点，并导致通讯终止。&lt;/p&gt;

      &lt;p&gt;（协议初始化/握手阶段的末尾，双方都会向对方发送一段“验证性的密文”，这段密文用各自的会话密钥进行【对称】加密，如果双方的会话密钥不一致，这一步就会失败，进而导致握手失败，连接终止）&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;基于-psk-的密钥协商&quot;&gt;基于 PSK 的密钥协商&lt;/h4&gt;

&lt;h5 id=&quot;概述-2&quot;&gt;概述&lt;/h5&gt;

&lt;p&gt;PSK 是“Pre-Shared Key”的缩写。顾名思义，就是【预先】让通讯双方共享一些密钥（通常是【对称加密】的密钥）。所谓的【预先】，就是说，这些密钥在 TLS 连接尚未建立之前，就已经部署在通讯双方的系统内了。&lt;/p&gt;

&lt;p&gt;这种算法用的不多，它的好处是：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;不需要依赖公钥体系，不需要部属 CA 证书。&lt;/li&gt;
    &lt;li&gt;不需要涉及非对称加密，TLS 协议握手（初始化）时的性能好于前述的 RSA 和 DH。
  更多介绍可以参见维基百科，链接在“&lt;a href=&quot;https://en.wikipedia.org/wiki/Pre-shared_key&quot;&gt;这里&lt;/a&gt;”。&lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;

&lt;h5 id=&quot;密钥协商的步骤-2&quot;&gt;密钥协商的步骤&lt;/h5&gt;

&lt;p&gt;（由于 PSK 用的不多，下面只简单介绍一下步骤，让大伙儿明白其原理）&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;在通讯【之前】，通讯双方已经预先部署了若干个共享的密钥。&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;为了标识多个密钥，给每一个密钥定义一个唯一的 ID&lt;/li&gt;
    &lt;li&gt;协商的过程很简单：客户端把自己选好的密钥的 ID 告诉服务端。&lt;/li&gt;
    &lt;li&gt;如果服务端在自己的密钥池子中找到这个 ID，就用对应的密钥与客户端通讯；否则就报错并中断连接。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;如何防范偷窥嗅探-2&quot;&gt;如何防范偷窥（嗅探）&lt;/h5&gt;

&lt;p&gt;使用这种算法，在协商密钥的过程中交换的是密钥的标识（ID）而【不是】密钥本身。
就算攻击者监视了全过程，也无法知晓密钥是什么。&lt;/p&gt;

&lt;h5 id=&quot;如何防范篡改假冒身份-2&quot;&gt;如何防范篡改（假冒身份）&lt;/h5&gt;

&lt;p&gt;PSK 可以单独使用，也可以搭配签名算法一起使用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;　　对于单独使用：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;如果攻击者篡改了协商过程中传送的密钥 ID，要么服务端发现 ID 无效（协商失败），要么服务端得到的 ID 与客户端不一致，在后续的通讯步骤中也会发现，并导致通讯终止。&lt;/p&gt;

      &lt;p&gt;（协议初始化/握手阶段的末尾，双方都会向对方发送一段“验证性的密文”，这段密文用各自的会话密钥进行【对称】加密，如果双方的会话密钥不一致，这一步就会失败，进而导致握手失败，连接终止）&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;　　对于搭配签名算法&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;如果攻击者篡改了协商过程中传送的密钥 ID，验证签名会失败&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;补充说明&quot;&gt;补充说明&lt;/h5&gt;

&lt;p&gt;PSK 与 RSA 具有某种相似性——既可以用来搞“&lt;strong&gt;密钥协商&lt;/strong&gt;”，也可以用来搞“&lt;strong&gt;身份认证&lt;/strong&gt;”。
所以，PSK 可以跟 DH（及其变种）进行组合。例如：DHE-PSK、ECDHE-PSK&lt;/p&gt;

&lt;h4 id=&quot;基于-srp-的密钥协商&quot;&gt;基于 SRP 的密钥协商&lt;/h4&gt;

&lt;h5 id=&quot;概述-3&quot;&gt;概述&lt;/h5&gt;

&lt;p&gt;SRP 是“Secure Remote Password”的缩写。&lt;/p&gt;

&lt;p&gt;这个算法有点类似于刚才提到的 PSK——只不过 client/server 双方共享的是比较人性化的密码（password）而不是密钥（key）。该算法采用了一些机制（盐/salt、随机数）来防范“嗅探/sniffer”或“字典猜解攻击”或“重放攻击”。&lt;/p&gt;

&lt;p&gt;这个算法应该用得很少——OpenSSL 直到2012年才开始支持该算法。所以这里就不展开了，有兴趣的同学可以去看 &lt;a href=&quot;https://tools.ietf.org/html/rfc2945&quot;&gt;RFC2945&lt;/a&gt; 的协议描述&lt;/p&gt;

&lt;h3 id=&quot;密钥存储&quot;&gt;密钥存储&lt;/h3&gt;

&lt;p&gt;对称加密使用的单一密钥会被收发双方存储，公开密钥加密的私钥由于还有&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%95%B8%E4%BD%8D%E7%B0%BD%E7%AB%A0&quot;&gt;数字签名&lt;/a&gt;的功能，所以都必须安全存储，以保障通信安全。业界已发展出各种各样的技术来保障密钥得到妥善存储，包括定期或不定的系统检测是否有入侵之虞、对存储媒体或服务器提供高强度的物理防护及监控。&lt;/p&gt;

&lt;p&gt;最常见的是加密应用程序负责管理用户的密钥，使用密钥时则需要输入认别用户的访问密码。对于认证机构，一旦私钥外泄，将可能导致整个&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E4%BF%A1%E4%BB%BB%E9%8F%88&quot;&gt;信任链&lt;/a&gt;被摧毁，影响广及众多客户，所以认证机构会使用&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%A1%AC%E9%AB%94%E5%AE%89%E5%85%A8%E6%A8%A1%E7%B5%84&quot;&gt;硬件安全模块&lt;/a&gt;，有些存储私钥的计算机甚至平时不会连线，只在固定的调度下，经过一系列严谨的行政程序重重把关，才会取出私钥为客户签名证书。&lt;/p&gt;

&lt;p&gt;在信任链设计中，绝大部分的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%A0%B9%E8%AF%81%E4%B9%A6&quot;&gt;根证书&lt;/a&gt;都不会直接为客户签名，而是先签名一个（或多个）中继证书，再由中继证书为客户签名，这可以加强控管能力及控制一旦签名私钥被泄时的损失。&lt;/p&gt;

&lt;h3 id=&quot;密钥使用&quot;&gt;密钥使用&lt;/h3&gt;

&lt;p&gt;密钥的有效期限是一个重要问题，一个密钥应该在产生后多久被汰换呢？&lt;/p&gt;

&lt;p&gt;密钥汰换之后，旧有的密钥就无法再解密新产生的密文，丧失对窃听者的价值，这会增加了攻击者所需要投入的气力，所以密钥应该经常替换。&lt;/p&gt;

&lt;p&gt;同时，这也可以减低信息一旦被破解（&lt;em&gt;一般是回溯性破解【注1】&lt;/em&gt;）时的损失：因为窃听者可能在破解密钥之前一直存储截取到的加密消息，等待成功破解密钥的一刻。所以密钥更换得越频密，窃听者可解读的消息就越少。&lt;/p&gt;

&lt;p&gt;在过去，如果可靠的密钥交换程序非常困难或者仅仅间歇可行，对称密钥会被长期使用。&lt;/p&gt;

&lt;p&gt;但在理想情况下，对称密钥应该在每次交换消息或会话时转换（&lt;em&gt;完美正向加密【注2】&lt;/em&gt;），使得如果某一密钥被泄（例如，被盗窃，密码分析或社会工程化）时，只有单一消息或会话被解读。&lt;/p&gt;

&lt;p&gt;基于公开密钥加密的特性，一对公钥和私钥的有效期一般会长于对称加密所使用的单一密钥，尤其是需要认证机构签核的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%9B%BB%E5%AD%90%E8%AD%89%E6%9B%B8&quot;&gt;电子证书&lt;/a&gt;，当中涉及行政及部署成本，所以可能是三个月至一、两年不等，考虑的因素包括配合加密算法的&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5%E9%95%BF%E5%BA%A6&quot;&gt;密钥长度&lt;/a&gt;、存储私钥的强度、一旦外泄可能引致的风险、更换程序对运行中的服务的影响、以及运行成本。&lt;/p&gt;

&lt;h2 id=&quot;七tsl握手&quot;&gt;七、TSL握手&lt;/h2&gt;

&lt;p&gt;有了前面的基础知识，这章我们就来讨论下TSL完整的实现过程。&lt;/p&gt;

&lt;p&gt;TSL建立连接要经过四次握手， 握手过程又分为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;单向验证：就是server端将证书发送给客户端，客户端验证server端证书的合法性等。例如百度、新浪、google等普通的https网站。&lt;/li&gt;
  &lt;li&gt;双向验证：不仅客户端会验证server端的合法性，同时server端也会验证客户端的合法性。例如银行网银登陆，支付宝登陆交易等。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面只讨论单向验证的情况：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/blogimg/asset/201402/bg2014020502.png&quot; alt=&quot;TLS握手&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;第一步客户端发出请求clienthello&quot;&gt;第一步：&lt;strong&gt;客户端发出请求（ClientHello）&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;首先，客户端（通常是浏览器）先向服务器发出加密通信的请求，这被叫做ClientHello请求。&lt;/p&gt;

&lt;p&gt;在这一步，客户端主要向服务器提供以下信息。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;（1） 支持的协议版本，比如TLS 1.0版。&lt;/p&gt;

  &lt;p&gt;（2） 一个客户端生成的随机数，稍后用于生成”对话密钥”。&lt;/p&gt;

  &lt;p&gt;（3） 支持的加密方法，比如RSA公钥加密。&lt;/p&gt;

  &lt;p&gt;（4） 支持的压缩方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这里需要注意的是，客户端发送的信息之中不包括服务器的域名。也就是说，理论上服务器只能包含一个网站，否则会分不清应该向客户端提供哪一个网站的数字证书。这就是为什么通常一台服务器只能有一张数字证书的原因。&lt;/p&gt;

&lt;p&gt;对于虚拟主机的用户来说，这当然很不方便。2006年，TLS协议加入了一个&lt;a href=&quot;http://tools.ietf.org/html/rfc4366&quot;&gt;Server Name Indication扩展&lt;/a&gt;，允许客户端向服务器提供它所请求的域名。&lt;/p&gt;

&lt;h3 id=&quot;第二步服务器回应severhello&quot;&gt;第二步：&lt;strong&gt;服务器回应（SeverHello）&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;服务器收到客户端请求后，向客户端发出回应，这叫做SeverHello。服务器的回应包含以下内容。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;（1） 确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。&lt;/p&gt;

  &lt;p&gt;（2） 一个服务器生成的随机数，稍后用于生成”对话密钥”。&lt;/p&gt;

  &lt;p&gt;（3） 确认使用的加密方法，比如RSA公钥加密。&lt;/p&gt;

  &lt;p&gt;（4） 服务器证书。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除了上面这些信息，如果服务器需要确认客户端的身份，就会再包含一项请求，要求客户端提供”客户端证书”。比如，金融机构往往只允许认证客户连入自己的网络，就会向正式客户提供USB密钥，里面就包含了一张客户端证书。&lt;/p&gt;

&lt;h3 id=&quot;第三步客户端回应&quot;&gt;第三步：客户端回应&lt;/h3&gt;

&lt;p&gt;客户端收到服务器回应以后，首先验证服务器证书。如果证书不是可信机构颁布、或者证书中的域名与实际域名不一致、或者证书已经过期，就会向访问者显示一个警告，由其选择是否还要继续通信。&lt;/p&gt;

&lt;p&gt;如果证书没有问题，客户端就会从证书中取出服务器的公钥。然后，向服务器发送下面三项信息。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;（1） 一个随机数。该随机数用服务器公钥加密，防止被窃听。&lt;/p&gt;

  &lt;p&gt;（2） 编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。&lt;/p&gt;

  &lt;p&gt;（3） 客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上面第一项的随机数，是整个握手阶段出现的第三个随机数，又称”pre-master key”。有了它以后，客户端和服务器就同时有了三个随机数，接着双方就用事先商定的加密方法，各自生成本次会话所用的同一把”会话密钥”。&lt;/p&gt;

&lt;p&gt;至于为什么一定要用三个随机数，来生成”会话密钥”，&lt;a href=&quot;http://blog.csdn.net/dog250/article/details/5717162&quot;&gt;dog250&lt;/a&gt;解释得很好：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“不管是客户端还是服务器，都需要随机数，这样生成的密钥才不会每次都一样。由于SSL协议中证书是静态的，因此十分有必要引入一种随机因素来保证协商出来的密钥的随机性。&lt;/p&gt;

  &lt;p&gt;对于RSA密钥交换算法来说，pre-master-key本身就是一个随机数，再加上hello消息中的随机，三个随机数通过一个密钥导出器最终导出一个对称密钥。&lt;/p&gt;

  &lt;p&gt;pre master的存在在于SSL协议不信任每个主机都能产生完全随机的随机数，如果随机数不随机，那么pre master secret就有可能被猜出来，那么仅适用pre master secret作为密钥就不合适了，因此必须引入新的随机因素，那么客户端和服务器加上pre master secret三个随机数一同生成的密钥就不容易被猜出了，一个伪随机可能完全不随机，可是是三个伪随机就十分接近随机了，每增加一个自由度，随机性增加的可不是一。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;此外，如果前一步，服务器要求客户端证书，客户端会在这一步发送证书及相关信息。&lt;/p&gt;

&lt;h3 id=&quot;第四步-服务器的最后回应&quot;&gt;第四步： 服务器的最后回应&lt;/h3&gt;

&lt;p&gt;服务器收到客户端的第三个随机数pre-master key之后，计算生成本次会话所用的”会话密钥”。然后，向客户端最后发送下面信息。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;（1）编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。&lt;/p&gt;

  &lt;p&gt;（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;至此，整个握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的HTTP协议，只不过用”会话密钥”加密内容。&lt;/p&gt;

&lt;h3 id=&quot;握手过程拟人化说明&quot;&gt;握手过程拟人化说明&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;A：我想和你安全的通话，我这里的对称加密算法有DES,RC5,    密钥交换算法有RSA和DH，    摘要算法有MD5和SHA。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;B：我们用DES－RSA－SHA这对组合好了。
这是我的证书，里面有我的名字和公钥，你拿去验证一下我的身份（把证书发给A）。
目前没有别的可说的了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A：（查看证书上B的名字是否无误，并通过手头早已有的CA的证书验证了B的证书的真实性，如果其中一项有误，发出警告并断开连接，这一步保证了B的公钥的真实性）&lt;/p&gt;

  &lt;p&gt;（产生一份秘密消息，这份秘密消息处理后将用作加密密钥，加密初始化向量（IV）和hmac的密钥。将这份秘密消息-协议中称为per_master_secret-用B的公钥加密，封装成称作ClientKeyExchange的消息。由于用了B的公钥，保证了第三方无法窃听）&lt;/p&gt;

  &lt;p&gt;我生成了一份秘密消息，并用你的公钥加密了，给你（把ClientKeyExchange发给B）
注意，下面我就要用加密的办法给你发消息了！&lt;/p&gt;

  &lt;p&gt;（将秘密消息进行处理，生成加密密钥，加密初始化向量和hmac的密钥）
[&lt;strong&gt;我说完了&lt;/strong&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;B：（用自己的私钥将ClientKeyExchange中的秘密消息解密出来，然后将秘密消息进行处理，生成加密密钥，加密初始化向量和hmac的密钥，这时双方已经安全的协商出一套加密办法了）
注意，我也要开始用加密的办法给你发消息了！
[&lt;strong&gt;我说完了&lt;/strong&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;八其他&quot;&gt;八、其他&lt;/h2&gt;

&lt;h3 id=&quot;http与https区别小结&quot;&gt;HTTP与HTTPS区别小结：&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;HTTP 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头&lt;/li&gt;
    &lt;li&gt;HTTP 是不安全的，而 HTTPS 是安全的&lt;/li&gt;
    &lt;li&gt;HTTP 标准端口是80 ，而 HTTPS 的标准端口是443&lt;/li&gt;
    &lt;li&gt;在OSI 网络模型中，HTTP工作于应用层，而HTTPS 工作在传输层&lt;/li&gt;
    &lt;li&gt;HTTP 无加密，而HTTPS 对传输的数据进行加密&lt;/li&gt;
    &lt;li&gt;HTTP无需证书，而HTTPS 需要&lt;a href=&quot;https://link.jianshu.com?t=https://www.baidu.com/s?wd=CA%E6%9C%BA%E6%9E%84&amp;amp;tn=44039180_cpr&amp;amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1d9nHKhnAP9ryDsnWbLPWfz0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPjfdPWTsrjf&quot;&gt;CA机构&lt;/a&gt;颁发的&lt;a href=&quot;https://link.jianshu.com?t=https://www.baidu.com/s?wd=SSL%E8%AF%81%E4%B9%A6&amp;amp;tn=44039180_cpr&amp;amp;fenlei=mv6quAkxTZn0IZRqIHckPjm4nH00T1d9nHKhnAP9ryDsnWbLPWfz0ZwV5Hcvrjm3rH6sPfKWUMw85HfYnjn4nH6sgvPsT6KdThsqpZwYTjCEQLGCpyw9Uz4Bmy-bIi4WUvYETgN-TLwGUv3EPjfdPWTsrjf&quot;&gt;SSL证书&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;握手过程优化&quot;&gt;握手过程优化&lt;/h3&gt;

&lt;p&gt;对于HTTP，为了避免每次请求都要经过tcp三次握手，使用了&lt;strong&gt;长连接&lt;/strong&gt;技术进行优化。&lt;/p&gt;

&lt;p&gt;而对于HTTPS，如果每次重连都要重新TSL握手也是比较消耗性能和费时的，大致有几个优化方向：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;Session id及session ticket的复用，缩减证书交换时间，减少可能的计算以及RTT时间 。&lt;/li&gt;
    &lt;li&gt;选取相对来说计算量较小且安全的算法 。&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;在此不再详细展开，有兴趣的可以参考&lt;a href=&quot;https://imququ.com/post/optimize-tls-handshake.html&quot;&gt;TLS 握手优化详解&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;参考链接&quot;&gt;参考链接：&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/41f7ae43e37b&quot;&gt;浅谈HTTPS（SSL/TLS）原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html&quot;&gt;SSL/TLS协议运行机制的概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://outofmemory.cn/wiki/how-to-enable-https-for-your-server&quot;&gt;HTTPS证书生成原理和部署细节&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://program-think.blogspot.com/2014/11/https-ssl-tls-0.html&quot;&gt;扫盲 HTTPS 和 SSL/TLS 协议系列&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://program-think.blogspot.com/2010/02/introduce-digital-certificate-and-ca.html&quot;&gt;数字证书及 CA 的扫盲介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc5246&quot;&gt; RFC:The Transport Layer Security (TLS) Protocol    Version 1.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/hherima/article/details/52469488&quot;&gt;HTTPS协议详解(三)：PKI 体系&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;《HTTP权威指南》 &lt;em&gt;人民邮电出版社 2012&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Tue, 09 Oct 2018 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2018/10/09/%E6%B2%A1%E9%82%A3%E4%B9%88%E6%B5%85%E5%9C%B0%E8%B0%88%E8%B0%88HTTP%E4%B8%8EHTTPS-%E4%B8%89/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2018/10/09/%E6%B2%A1%E9%82%A3%E4%B9%88%E6%B5%85%E5%9C%B0%E8%B0%88%E8%B0%88HTTP%E4%B8%8EHTTPS-%E4%B8%89/</guid>
        
        <category>http</category>
        
        <category>https</category>
        
        <category>密钥协商</category>
        
        <category>密钥管理</category>
        
        <category>网络安全</category>
        
        <category>TSL握手</category>
        
        
      </item>
    
      <item>
        <title>没那么浅地谈谈HTTP与HTTPS【二】</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;玫瑰与荆棘共生，香菇与毒菇同长，真实与假冒比翼腾飞。——王蒙&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;没那么浅地谈谈http与https二&quot;&gt;没那么浅地谈谈HTTP与HTTPS【二】&lt;/h1&gt;

&lt;h2 id=&quot;四加密算法和密钥管理&quot;&gt;四、加密算法和密钥管理&lt;/h2&gt;

&lt;p&gt;介绍密钥交换机制之前先普及一些加密算法基本知识以及为什么要有密钥管理机制。&lt;/p&gt;

&lt;h3 id=&quot;1-加密算法&quot;&gt;1. 加密算法&lt;/h3&gt;

&lt;p&gt;加密算法就是将普通信息（&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%98%8E%E6%96%87&quot;&gt;明文&lt;/a&gt;）转换成难以理解的数据（&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87&quot;&gt;密文&lt;/a&gt;）的过程；&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%A7%A3%E5%AF%86&quot;&gt;解密&lt;/a&gt;算法则是其相反的过程：由&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%86%E6%96%87&quot;&gt;密文&lt;/a&gt;转换回&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E6%98%8E%E6%96%87&quot;&gt;明文&lt;/a&gt;；&lt;/p&gt;

&lt;p&gt;加解密包含了这两种&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95&quot;&gt;算法&lt;/a&gt;，一般&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86&quot;&gt;加密&lt;/a&gt;即同时指称&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8A%A0%E5%AF%86&quot;&gt;加密&lt;/a&gt;与&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E8%A7%A3%E5%AF%86&quot;&gt;解密&lt;/a&gt;的技术。&lt;/p&gt;

&lt;p&gt;加解密的具体运作由两部分决定：一个是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E7%AE%97%E6%B3%95&quot;&gt;算法&lt;/a&gt;，另一个是&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5&quot;&gt;密钥&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%AF%86%E9%92%A5&quot;&gt;密钥&lt;/a&gt;是一个用于加解密算法的秘密参数，通常只有通信者拥有。&lt;/p&gt;

&lt;h4 id=&quot;1-对称密钥加密&quot;&gt;1） 对称密钥加密&lt;/h4&gt;

&lt;p&gt;对称密钥加密是密码学中的一种加密法，是以转换其中一个数字、字母或仅字符串随机字母，一个秘密密钥会以特定的方式变更消息里面的文字或字母，例如更换字母相对位置（例如hello变成lohel）。只要寄件者与收件者知道秘密密钥，他们可以加密和解密并使用这个数据。&lt;/p&gt;

&lt;h4 id=&quot;2公开密钥加密&quot;&gt;2.）公开密钥加密&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86&quot;&gt;公开密钥加密&lt;/a&gt;（也称为非对称加密）是密码学中的一种加密法，非对称密钥，是指一对加密密钥与解密密钥，某用户使用加密密钥加密后所获得的数据，只能用该用户的解密密钥才能够解密。如果知道了其中一个，并不能计算出另外一个。因此如果公开了其中一个密钥，并不会危害到另外一个。因此公开的密钥为公钥；不公开的密钥为私钥。&lt;/p&gt;

&lt;h3 id=&quot;2-单纯使用加密算法存在的问题&quot;&gt;2. 单纯使用加密算法存在的问题&lt;/h3&gt;

&lt;p&gt;通信双方使用加密算法之后，需要密钥来解密和加密信息，而双方如何得到、交换密钥，并且不会被第三方窃取，或者说密钥就算被窃取也不会导致密文被解密读取呢？&lt;/p&gt;

&lt;h4 id=&quot;1单纯对称加密算法的困境&quot;&gt;1）单纯对称加密算法的困境：&lt;/h4&gt;

&lt;p&gt;如果“单纯用对称加密”，浏览器和网站之间势必先要交换“对称加密的密钥”。&lt;/p&gt;

&lt;p&gt;如果这个密钥直接用【明文】传输，很容易就会被第三方（有可能是“攻击者”）偷窥到；如果这个密钥用密文传输，那就再次引入了“如何交换加密密钥”的问题——这就变成“先有鸡还是先有蛋”的循环逻辑了。&lt;/p&gt;

&lt;h4 id=&quot;2单纯非对称加密算法的困境&quot;&gt;2）单纯非对称加密算法的困境：&lt;/h4&gt;

&lt;p&gt;基于“加密和解密采用不同的密钥”的特点，可以避开前面提到的“循环逻辑”的困境。大致的步骤如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;第1步&lt;/strong&gt;
网站服务器先基于“非对称加密算法”，随机生成一个“密钥对”（为叙述方便，称之为“k1 和 k2”）。因为是随机生成的，目前为止，只有网站服务器才知道 k1 和 k2。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;第2步&lt;/strong&gt;
网站把 k1 保留在自己手中，把 k2 用【明文】的方式发送给访问者的浏览器。
因为 k2 是明文发送的，自然有可能被偷窥。不过不要紧。即使偷窥者拿到 k2，也【很难】根据 k2 推算出 k1
（这一点是由“非对称加密算法”从数学上保证的）。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;第3步&lt;/strong&gt;
浏览器拿到 k2 之后，先【随机生成】第三个对称加密的密钥（简称 k）。
然后用 k2 加密 k，得到 k’（k’ 是 k 的加密结果）
浏览器把 k’ 发送给网站服务器。
由于 k1 和 k2 是成对的，所以只有 k1 才能解密 k2 的加密结果。
因此这个过程中，即使被第三方偷窥，第三方也【无法】从 k’ 解密得到 k&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;第4步&lt;/strong&gt;
网站服务器拿到 k’ 之后，用 k1 进行解密，得到 k
至此，浏览器和网站服务器就完成了密钥交换，双方都知道 k，而且【貌似】第三方无法拿到 k
然后，双方就可以用 k 来进行数据双向传输的加密。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;乍看以上步骤很严密，即使被第三方偷窥，第三方也难以从 k’ 解密得到 k。&lt;/p&gt;

&lt;p&gt;但这种方法有一个致命的缺陷，就是无法防止数据篡改，也无法识别假冒的身份。&lt;/p&gt;

&lt;p&gt;攻击方法如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;第1步&lt;/strong&gt;
这一步跟原先一样——服务器先随机生成一个“非对称的密钥对”k1 和 k2（此时只有网站知道 k1 和 k2）&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;第2步&lt;/strong&gt;
当网站发送 k2 给浏览器的时候，攻击者截获 k2，保留在自己手上。
然后攻击者自己生成一个【伪造的】密钥对（以下称为 pk1 和 pk2）。
攻击者把 pk2 发送给浏览器。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;第3步&lt;/strong&gt;
浏览器收到 pk2，以为 pk2 就是网站发送的。
浏览器不知情，依旧随机生成一个对称加密的密钥 k，然后用 pk2 加密 k，得到密文的 k’
浏览器把 k’ 发送给网站。
（以下是关键）&lt;/p&gt;

  &lt;p&gt;发送的过程中，再次被攻击者截获。
因为 pk1 pk2 都是攻击者自己生成的，所以攻击者自然就可以用 pk1 来解密 k’ 得到 k
然后，攻击者拿到 k 之后，用之前截获的 k2 重新加密，得到 k’‘，并把 k’’ 发送给网站。&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;第4步&lt;/strong&gt;
网站服务器收到了 k’’ 之后，用自己保存的 k1 可以正常解密，所以网站方面不会起疑心。
至此，攻击者完成了一次漂亮的偷梁换柱，而且让双方都没有起疑心。　　&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;上述过程，即是传说中的&lt;strong&gt;中间人攻击&lt;/strong&gt;（Man-In-The-Middle attack ）。&lt;/p&gt;

&lt;h3 id=&quot;3-失败的原因缺乏可靠的身份认证&quot;&gt;3. 失败的原因—缺乏【可靠的】身份认证&lt;/h3&gt;

&lt;p&gt;为什么以上方案会失败？&lt;/p&gt;

&lt;p&gt;除了提到的“攻击者具备篡改数据的能力”，还有另一点关键点——“缺乏身份认证机制”。&lt;/p&gt;

&lt;p&gt;正是因为“缺乏身份认证机制”，所以当攻击者一开始截获 k2 并把自己伪造的 pk2 发送给浏览器时，浏览器无法鉴别：自己收到的密钥是不是真的来自于网站服务器。&lt;/p&gt;

&lt;p&gt;假如具备某种【可靠的】身份认证机制，即使攻击者能够篡改数据，但是篡改之后的数据很容易被识破。那篡改也就失去了意义。于是我们引入“CA认证体系”。&lt;/p&gt;

&lt;h2 id=&quot;五ca认证体系&quot;&gt;五、CA认证体系&lt;/h2&gt;

&lt;h3 id=&quot;ca&quot;&gt;CA&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;数字证书认证机构&lt;/strong&gt;（英语：Certificate Authority，缩写为CA），也称为&lt;strong&gt;电子商务认证中心&lt;/strong&gt;、&lt;strong&gt;电子商务认证授权机构&lt;/strong&gt;，是PKI(公钥基础设施)的核心执行机构，是PKI的主要组成部分，并作为电子商务交易中受信任的第三方，承担公钥体系中公钥的合法性检验的责任。&lt;/p&gt;

&lt;p&gt;从广义上讲，认证中心还应该包括证书申请注册机构RA（Registration Authority），RA是数字证书的申请注册、证书签发的管理机构。&lt;/p&gt;

&lt;h3 id=&quot;ca证书&quot;&gt;CA证书&lt;/h3&gt;

&lt;p&gt;CA 证书，顾名思义，就是CA颁发的证书。 　　&lt;/p&gt;

&lt;p&gt;人人都可以找工具制作证书。但是个人制作出来的证书是没什么用处的。&lt;/p&gt;

&lt;p&gt;因为你【不是】权威的 CA 机关，你自己搞的证书不具有权威性。 　　&lt;/p&gt;

&lt;h3 id=&quot;pki公钥基础设施&quot;&gt;PKI公钥基础设施&lt;/h3&gt;

&lt;p&gt;公钥基础设施（Public Key Infrastructure，简称PKI）是目前网络安全建设的基础与核心。&lt;/p&gt;

&lt;p&gt;简单的说PKI技术就是利用公钥理论和技术建立的提供信息安全服务的基础设施，该体系在统一的安全认证标准和规范基础上提供在线身份认证，是&lt;em&gt;CA认证、数字证书、数字签名&lt;/em&gt;以及相关&lt;em&gt;安全应用组件模块&lt;/em&gt;的集合。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://my.csdn.net/uploads/201207/23/1343046891_2891.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;做为一种技术体系，PKI可以作为支持认证、完整性、机密性和不可否认性的技术基础，从技术上解决网上身份认证、信息完整性的抗抵赖等安全问题，为网络应用提供可靠的安全保障，但PKI不仅仅涉及到技术层面的问题。&lt;/p&gt;

&lt;h3 id=&quot;证书链&quot;&gt;证书链&lt;/h3&gt;

&lt;p&gt;为了尽可能的保证根证书的安全性，CA中心采取了一种树状的结构：&lt;/p&gt;

&lt;p&gt;一个root CA下面包含多个intermediates CA，然后根CA和次级CA都可以颁发证书给用户，颁发的证书分别是根证书和次级证书，最后则是用户的证书，也可以说是中级证书。&lt;/p&gt;

&lt;h3 id=&quot;证书信任链&quot;&gt;证书信任链&lt;/h3&gt;

&lt;p&gt;实际上，证书之间的信任关系，是可以嵌套的。比如，C 信任 A1，A1 信任 A2，A2 信任 A3……这个叫做证书的信任链。&lt;/p&gt;

&lt;p&gt;只要你信任链上的头一个证书，那后续的证书，都是可以信任的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/09/19/5ba264311d143.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ca认证体系的基本使用&quot;&gt;CA认证体系的基本使用&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/09/19/5ba2647913e02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;服务方S向第三方机构CA提交公钥、组织信息、个人信息(域名)等信息并申请认证;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;CA通过线上、线下等多种手段验证申请者提供信息的真实性，如组织是否存在、企业是否合法，是否拥有域名的所有权等;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如信息审核通过，CA会向申请者签发认证文件-证书。证书包含以下信息：申请者公钥、申请者的组织信息和个人信息、签发机构 CA的信息、有效时间、证书序列号等信息的明文，同时包含一个签名;&lt;/p&gt;

    &lt;p&gt;（签名的产生算法：首先，使用散列函数计算公开的明文信息的信息摘要，然后，采用 CA的私钥对信息摘要进行加密，密文即签名。）&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户端 C 向服务器 S 发出请求时，S 返回证书文件;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户端 C读取证书中的相关的明文信息，采用相同的散列函数计算得到信息摘要，然后，利用对应 CA的公钥解密签名数据，对比证书的信息摘要，如果一致，则可以确认证书的合法性，即公钥合法;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户端验证证书相关的域名信息、有效时间等信息;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;客户端会内置信任CA的证书信息(包含公钥)，如果CA不被信任，则找不到对应 CA的证书，证书也会被判定非法。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在这个过程注意几点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;申请证书不需要提供私钥，确保私钥永远只能由服务器端掌握;&lt;/li&gt;
  &lt;li&gt;证书的合法性仍然依赖于非对称加密算法，证书主要是增加了服务器信息以及签名;&lt;/li&gt;
  &lt;li&gt;内置 CA 对应的证书称为根证书，颁发者和使用者相同，自己为自己签名，即自签名证书（为什么说”部署自签SSL证书非常不安全”）&lt;/li&gt;
  &lt;li&gt;证书= 公钥 + 申请者与颁发者信息 + 签名;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;★&lt;/strong&gt;即便有人截取服务器A证书，再发给客户端，想冒充服务器A，也无法实现。因为证书和url的域名是绑定的。&lt;/p&gt;

</description>
        <pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate>
        <link>https://UlyC.github.io/2018/09/21/%E6%B2%A1%E9%82%A3%E4%B9%88%E6%B5%85%E5%9C%B0%E8%B0%88%E8%B0%88HTTP%E4%B8%8EHTTPS-%E4%BA%8C/</link>
        <guid isPermaLink="true">https://UlyC.github.io/2018/09/21/%E6%B2%A1%E9%82%A3%E4%B9%88%E6%B5%85%E5%9C%B0%E8%B0%88%E8%B0%88HTTP%E4%B8%8EHTTPS-%E4%BA%8C/</guid>
        
        <category>http</category>
        
        <category>https</category>
        
        <category>加密算法</category>
        
        <category>证书</category>
        
        <category>网络安全</category>
        
        
      </item>
    
  </channel>
</rss>
